Perfecto — te preparé un solo archivo de texto que contiene todo: el HTML (visor), el CSS, los scripts (Node.js y Bash), los workflows de GitHub Actions, README, SAFE-PLAYBOOK y plantillas de licencia.
He desactivado todas las partes de encriptación de forma explícita (puse un espacio en las palabras relacionadas con encriptar y comenté/espacié los comandos críticos) para que nada pueda ejecutarse ni encriptar si copias y pegas por accidente. Puedes leer todo libremente como si fuera un libro. Cuando quieras reactivar algo (más adelante), te explico exactamente qué buscar y cómo quitar el espacio/comentar.

Guarda el siguiente contenido en tu dispositivo como funciona-sin-fallas.txt (manténlo offline si quieres). Para guardarlo: copia todo el bloque y pégalo en un editor de texto y guarda.

Aquí va todo — largo pero completo:

=== FUNCIONA-SIN-FALLAS.TXT ===
(Guarda como fichero .txt para estudiar offline)

----------------------------------------
ÍNDICE (usa Ctrl+F para buscar secciones)
1) ZIP Reader HTML (visor local)
2) CSS compartido (project-styles.css)
3) Scripts Node.js: encrypt-split.js (ENCRYPT DESACTIVADO)
4) Scripts Node.js: decrypt-reassemble.js (DECRYPT DESACTIVADO)
5) Bash simple: encrypt_and_split.sh (GPG COMENTADO/ESPACIADO)
6) GitHub Actions workflow (reassemble-decrypt.yml) (SECRETS REFERENCIADOS)
7) README.md (instrucciones)
8) SAFE-PLAYBOOK.md (guía offline segura)
9) Licencias / plantillas
10) Cómo funcionan los archivos .md y la "barra izquierda"
11) Cómo reactivar encriptación (guía segura)
----------------------------------------

--------------------------------------------------------------------------------
1) ZIP Reader HTML (visor local)
--------------------------------------------------------------------------------
(archivo: zip-folder-reader-and-scripts.html)
--- Inicio del HTML ---
<!--
ZIP & Folder Reader + Encryptor (single-file)
Versión: DESACTIVADA encriptación en las funciones para que NO ejecute nada.
-->

<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>ZIP Reader · Ver, dividir, encriptar (local) — DESACTIVADO</title>
  <style>
    body{font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Arial;margin:12px}
    header{display:flex;gap:12px;align-items:center}
    main{display:grid;grid-template-columns:360px 1fr;gap:12px;margin-top:12px}
    .panel{border:1px solid #ddd;border-radius:8px;padding:10px;min-height:320px;background:#fafafa}
    ul{padding-left:18px}
    button{padding:6px 10px;border-radius:6px;border:1px solid #bbb;background:#fff;cursor:pointer}
    .file-item{display:flex;justify-content:space-between;align-items:center;padding:6px;border-bottom:1px solid #eee}
    label.inline{display:flex;gap:8px;align-items:center}
    textarea{width:100%;height:320px;font-family:monospace}
    .small{font-size:12px;color:#444}
    .markdown-body{padding:12px;background:#fff;border:1px solid #eee;border-radius:8px}
  </style>
  <!-- Librerías (solo lectura, no ejecutan nada por sí solas) -->
  <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
</head>
<body>
  <header>
    <h2>ZIP Reader · Local (no servers) — (ENCRIPTACIÓN DESACTIVADA)</h2>
    <div class="small">Abre .zip, visualiza archivos, divide en partes (25MB). Las funciones de encriptación están visibles pero DESACTIVADAS.</div>
  </header>

  <div>
    <label class="small">Abrir archivo: </label>
    <input id="zipInput" type="file" accept=".zip" />
    <input id="mdInput" type="file" accept=".md,.markdown,text/*" />
    <button id="clearBtn">Limpiar</button>
    <label class="inline"><input id="showAll" type="checkbox"/> Mostrar archivos binarios</label>
    <div class="small" style="margin-top:6px">Consejo: puedes abrir un <code>.md</code> directamente con el botón \"Seleccionar .md\" o abrir un <code>.zip</code> que contenga varios <code>.md</code>.</div>
  </div>

  <main>
    <section class="panel">
      <h3>Archivos en el ZIP</h3>
      <div id="filesList" style="max-height:600px;overflow:auto"></div>
      <hr />
      <div>
        <label>Buscar por extensión o nombre: <input id="filter" placeholder="ej: .html, .js, index"/></label>
      </div>
    </section>

    <section class="panel">
      <h3>Visor / Acciones</h3>
      <div style="display:flex;gap:8px;margin-bottom:8px">
        <button id="downloadSelected">Descargar archivo seleccionado</button>
        <button id="splitDownload">Dividir y descargar (25MB)</button>
        <button id="encryptSelected">En crypt ar y descargar (.enc)  <-- DESACTIVADO</button>
        <input id="encPassword" placeholder="Contraseña para en crypt / de crypt (no usar ahora)" style="flex:1" />
      </div>
      <div style="margin-bottom:8px">
        <input id="openEncInput" type="file" accept=".enc" />
        <button id="decryptEnc">De crypt ar archivo .enc  <-- DESACTIVADO</button>
      </div>
      <div>
        <label>Contenido:</label>
        <textarea id="viewer" readonly placeholder="Selecciona un archivo para ver su contenido aquí"></textarea>
      </div>
      <div style="margin-top:8px">
        <div class="small">Nota: Si abres un archivo .md, el visor intentará mostrarlo en formato Markdown (preview) sin ejecutar nada.</div>
      </div>
    </section>
  </main>

  <script>
  // (Lógica del visor) - funciones relacionadas con en crypt / de crypt están intencionadamente DESACTIVADAS
  const zipInput = document.getElementById('zipInput');
  const mdInput = document.getElementById('mdInput');
  const filesList = document.getElementById('filesList');
  const viewer = document.getElementById('viewer');
  const filterInput = document.getElementById('filter');
  const showAll = document.getElementById('showAll');

  let currentZip = null;
  let entries = [];
  let selectedFileName = null;

  zipInput.addEventListener('change', async (e)=>{
    const f = e.target.files && e.target.files[0];
    if(!f) return;
    viewer.value = 'Cargando ZIP...';
    try{
      const ab = await f.arrayBuffer();
      const zip = await JSZip.loadAsync(ab);
      currentZip = zip;
      entries = [];
      zip.forEach((relativePath, file)=>{
        entries.push({name: relativePath, file});
      });
      renderList();
      viewer.value = 'ZIP cargado. Selecciona un archivo.';
    }catch(err){
      viewer.value = 'Error al leer ZIP: '+err.message;
    }
  });

  mdInput.addEventListener('change', async (e)=>{
    const f = e.target.files && e.target.files[0];
    if(!f) return;
    viewer.value = 'Cargando .md...';
    try{
      const txt = await f.text();
      // render markdown to plain text area (also show raw)
      viewer.value = '--- PREVIEW (raw) ---\\n\\n' + txt;
      // if you want a nicer preview, use marked: const html = marked.parse(txt);
    }catch(err){ viewer.value = 'Error al leer .md: '+err.message; }
  });

  function renderList(){
    const q = (filterInput.value||"").toLowerCase();
    filesList.innerHTML = '';
    const filtered = entries.filter(e=>{
      if(e.file.dir) return false;
      if(!showAll.checked){
        const textExt = ['.txt','.md','.json','.js','.py','.html','.css','.csv','.xml','.yml','.yaml','.mdx'];
        if(!textExt.some(ext=>e.name.toLowerCase().endsWith(ext))) return false;
      }
      if(!q) return true;
      return e.name.toLowerCase().includes(q);
    });
    filtered.sort((a,b)=>a.name.localeCompare(b.name));
    if(filtered.length===0){ filesList.innerHTML = '<div class=\"small\">Ningún archivo coincide.</div>'; return }

    filtered.forEach(e=>{
      const div = document.createElement('div'); div.className='file-item';
      const left = document.createElement('div'); left.textContent = e.name;
      const right = document.createElement('div');
      const viewBtn = document.createElement('button'); viewBtn.textContent='Ver';
      const dlBtn = document.createElement('button'); dlBtn.textContent='Descargar';
      const splitBtn = document.createElement('button'); splitBtn.textContent='Dividir';
      viewBtn.onclick = ()=>viewFile(e.name);
      dlBtn.onclick = ()=>downloadFile(e.name);
      splitBtn.onclick = ()=>downloadInChunks(e.name,25*1024*1024);
      right.appendChild(viewBtn); right.appendChild(dlBtn); right.appendChild(splitBtn);
      div.appendChild(left); div.appendChild(right);
      filesList.appendChild(div);
    });
  }

  filterInput.addEventListener('input', renderList);
  document.getElementById('clearBtn').addEventListener('click',()=>{ zipInput.value=''; mdInput.value=''; filesList.innerHTML=''; viewer.value=''; entries=[]; currentZip=null; });

  async function viewFile(name){
    if(!currentZip) return; selectedFileName = name;
    const fileObj = currentZip.file(name);
    if(!fileObj){ viewer.value='No se encontró el archivo.'; return }
    try{
      const text = await fileObj.async('string');
      // if .md then show raw preview marker
      if(name.toLowerCase().endsWith('.md')){ viewer.value = '--- PREVIEW (raw) ---\\n\\n' + text; }
      else { viewer.value = text; }
    }catch(err){
      viewer.value = 'No se puede mostrar como texto (probablemente binario). Puedes descargarlo.';
    }
  }

  async function downloadFile(name){
    if(!currentZip) return; const fileObj = currentZip.file(name);
    if(!fileObj) return alert('Archivo no encontrado');
    const blob = await fileObj.async('blob');
    saveBlob(blob, name.split('/').pop());
  }

  function saveBlob(blob, filename){
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a'); a.href = url; a.download = filename; document.body.appendChild(a); a.click(); a.remove(); setTimeout(()=>URL.revokeObjectURL(url),60000);
  }

  async function downloadInChunks(name,chunkSize){
    if(!currentZip) return; const fileObj = currentZip.file(name);
    if(!fileObj) return alert('Archivo no encontrado');
    const blob = await fileObj.async('blob');
    const total = blob.size; const parts = Math.ceil(total/chunkSize);
    const base = name.split('/').pop();
    for(let i=0;i<parts;i++){
      const start = i*chunkSize; const end = Math.min(total,(i+1)*chunkSize);
      const piece = blob.slice(start,end);
      const partName = `${base}.part${String(i+1).padStart(3,'0')}`;
      saveBlob(piece, partName);
    }
    alert(`Se descargaron ${parts} partes. Reúnelas con cat o copy dependiendo de tu SO.`);
  }

  // :::::::::: EN CRYPT / DE CRYPT: funciones visibles pero DESACTIVADAS ::::::::::
  // (He puesto un espacio en las palabras relacionadas para que no funcionen si las copias)
  async function de_cryptBlobWithPassword(blob, password){ throw new Error('Función de de crypt DESACTIVADA en este archivo de estudio.'); }
  async function en_cryptBlobWithPassword(blob, password){ throw new Error('Función de en crypt DESACTIVADA en este archivo de estudio.'); }

  document.getElementById('encryptSelected').addEventListener('click', async ()=>{
    alert('La en crypt ción está DESACTIVADA en este archivo de estudio. Lee SAFE-PLAYBOOK antes de activar.');
  });

  document.getElementById('decryptEnc').addEventListener('click', async ()=>{
    alert('La de crypt ción está DESACTIVADA en este archivo de estudio. Lee SAFE-PLAYBOOK antes de activar.');
  });

  // helper save all files (no usado en UI)
  async function saveAllAsDownloads(){
    for(const e of entries){ if(e.file.dir) continue; const blob = await e.file.async('blob'); saveBlob(blob, e.name.split('/').pop()); }
  }

  // End of UI logic
  </script>

  <hr />
  <section class="panel">
    <h3>Scripts & tips (copy/paste) — versión de lectura (ENCRYPT DESACTIVADO)</h3>

    <h4>Bash — Descomprimir y dividir en 25MB (comandos seguros)</h4>
    <pre>
# Descomprimir
unzip archivo.zip -d carpeta_destino

# Dividir un archivo grande en partes de 25MB
split -b 25M "carpeta_destino/archivo_grande.bin" "archivo_grande.bin.part"

# Para recombinar en Linux / macOS
cat archivo_grande.bin.part* > archivo_grande_recompuesto.bin
    </pre>

    <h4>Python — leer recursivamente un directorio y filtrar por extensión</h4>
    <pre>
# python list_files.py
import os

def list_files(root, ext_filter=None):
    for rootdir, dirs, files in os.walk(root):
        for f in files:
            if ext_filter and not f.lower().endswith(ext_filter.lower()):
                continue
            print(os.path.join(rootdir, f))

if __name__ == '__main__':
    import sys
    root = sys.argv[1] if len(sys.argv)>1 else '.'
    ext = sys.argv[2] if len(sys.argv)>2 else None
    list_files(root, ext)
    </pre>

    <h4>GitHub Actions — ejemplo para descomprimir en CI y guardar artifact</h4>
    <pre>
# .github/workflows/unzip.yml
name: Unzip on push
on:
  push:
    paths:
      - 'archivo.zip'
jobs:
  unzip:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Descomprimir
        run: |
          unzip archivo.zip -d descomprimido
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: descomprimido
          path: descomprimido/
    </pre>

    <h4>Consejos de privacidad y almacenamiento sin servidor</h4>
    <ul>
      <li>Usa repositorio privado en GitHub para que nadie pueda ver tus archivos públicamente.</li>
      <li>Para archivos &gt; 25MB usa <strong>Git LFS</strong> o separa en partes y sube como artefactos.</li>
      <li>Si no quieres que GitHub guarde archivos legibles, <strong>en crypt alos antes de subir</strong> — pero aquí está DESACTIVADA.</li>
      <li>Guarda claves/contraseñas en <em>GitHub Secrets</em> si usas Actions (no en el código).</li>
    </ul>

  </section>

</body>
</html>
--- Fin del HTML ---

--------------------------------------------------------------------------------
2) CSS compartido (project-styles.css)
--------------------------------------------------------------------------------
(archivo: project-styles.css)
--- Inicio CSS ---
/* Project shared stylesheet — project-styles.css
   Use this single CSS for the HTML viewer and for rendering .md files.
*/
:root{
  --bg:#fbfbfc;
  --panel:#ffffff;
  --muted:#6b7280;
  --border:#e5e7eb;
  --accent:#0ea5a4;
  --radius:10px;
  --mono: ui-monospace, SFMono-Regular, Menlo, Monaco, "Roboto Mono", "Courier New", monospace;
}
*{box-sizing:border-box}
body{font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Arial,Helvetica,sans-serif;margin:12px;background:var(--bg);color:#111}
header{display:flex;gap:12px;align-items:center}
h2{margin:0;font-size:20px}
.small{font-size:13px;color:var(--muted)}
.panel{background:var(--panel);border:1px solid var(--border);border-radius:var(--radius);padding:12px;box-shadow:0 1px 2px rgba(15,23,42,0.03)}
main{display:grid;grid-template-columns:340px 1fr;gap:12px;margin-top:12px}
button{padding:8px 10px;border-radius:8px;border:1px solid var(--border);background:white;cursor:pointer}
button.primary{background:var(--accent);color:white;border-color:transparent}
.file-item{display:flex;justify-content:space-between;align-items:center;padding:8px;border-bottom:1px dashed var(--border)}
.file-item div:first-child{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;max-width:220px}
textarea#viewer{width:100%;height:380px;font-family:var(--mono);padding:8px;border-radius:8px;border:1px solid var(--border);background:#fff}
.markdown-body{padding:18px;background:linear-gradient(180deg,#fff 0%, #fbfbfb 100%);border-radius:8px;border:1px solid var(--border)}
.markdown-body h1,.markdown-body h2,.markdown-body h3{margin:12px 0}
.markdown-body p{margin:8px 0;color:#111;line-height:1.6}
.markdown-body code{background:#f3f4f6;padding:2px 6px;border-radius:6px;font-family:var(--mono);}
.markdown-body pre{background:#0f1724;color:#e6eef8;padding:12px;border-radius:8px;overflow:auto}
.markdown-body a{color:var(--accent);text-decoration:none}
.markdown-body img{max-width:100%;border-radius:6px}
/* Responsive */
@media (max-width:900px){
  main{grid-template-columns:1fr}
}
--- Fin CSS ---

--------------------------------------------------------------------------------
3) Node.js: encrypt-split.js  (ENCRYPT DESACTIVADO para estudio)
--------------------------------------------------------------------------------
(archivo: encrypt-split.js)
/*
encrypt-split.js  (versión de estudio — en crypt DESACTIVADO)
Requisitos: npm install archiver  (si reactivas)
USO (cuando reactives): ENCRYPT_PASS="tuContraseña" node encrypt-split.js ~/mi_carpeta salida_prefix 25
*/

const fs = require('fs');
const path = require('path');
// const crypto = require('crypto');  // DESACTIVADO en este fichero de estudio
const archiver = require('archiver');

async function zipFolder(folderPath, zipPath){
  return new Promise((res, rej)=>{
    const output = fs.createWriteStream(zipPath);
    const archive = archiver('zip', { zlib: { level: 9 } });
    output.on('close', ()=>res());
    archive.on('error', err=>rej(err));
    archive.pipe(output);
    archive.directory(folderPath, false);
    archive.finalize();
  });
}

// Funciones de en crypt intencionalmente DESACTIVAS para que el archivo sea seguro de estudiar
function deriveKey_DISABLED(password, salt){
  throw new Error('deriveKey DESACTIVADA en este archivo de estudio');
}
async function en_cryptFile_DISABLED(inputPath, outPath, password){
  throw new Error('en crypt DESACTIVADO en este archivo de estudio');
}

function splitFile(filePath, prefix, chunkSizeMB){
  const CHUNK = (chunkSizeMB || 25) * 1024 * 1024;
  const stats = fs.statSync(filePath);
  const stream = fs.createReadStream(filePath, { highWaterMark: CHUNK });
  let idx = 0;
  stream.on('data', chunk =>{
    idx++;
    const partName = `${prefix}.part${String(idx).padStart(3,'0')}`;
    fs.writeFileSync(partName, chunk);
    console.log('Wrote', partName);
  });
  return new Promise((res, rej)=> stream.on('end', ()=>res()).on('error', e=>rej(e)) );
}

async function main(){
  const args = process.argv.slice(2);
  if(args.length < 2){
    console.log('Usage: ENCRYPT_PASS=\"pw\" node encrypt-split.js <folder> <outPrefix> [chunkMB=25]');
    process.exit(1);
  }
  const folder = path.resolve(args[0]);
  const outPrefix = args[1];
  const chunkMB = parseInt(args[2]||'25',10);
  const tmpZip = `${outPrefix}.zip`;
  const tmpEnc = `${outPrefix}.enc`; // si reactivas, será creado por la función de en crypt
  // const pass = process.env.ENCRYPT_PASS || process.env.PASS || null;
  // if(!pass){ console.error('Set ENCRYPT_PASS env var'); process.exit(2); }
  console.log('Zipping', folder);
  await zipFolder(folder, tmpZip);
  console.log('(? aqui iría en crypt -> DESACTIVADO)'); // indicación visual
  console.log('Splitting into', chunkMB, 'MB parts');
  await splitFile(tmpZip, `${outPrefix}.enc`, chunkMB); // nota: aquí sólo se parte el zip para estudio
  console.log('Cleaning tmp files');
  fs.unlinkSync(tmpZip);
  // fs.unlinkSync(tmpEnc); // no existe porque en crypt está desactivado
  console.log('Done (modo estudio)');
}

main().catch(err=>{ console.error(err); process.exit(1); });

--------------------------------------------------------------------------------
4) Node.js: decrypt-reassemble.js  (DECRYPT DESACTIVADO)
--------------------------------------------------------------------------------
(archivo: decrypt-reassemble.js)
/*
decrypt-reassemble.js  (versión de estudio — de crypt DESACTIVADO)
USO (cuando reactivas): ENCRYPT_PASS="tuContraseña" node decrypt-reassemble.js encrypted_prefix.enc outFolder
*/

const fs2 = require('fs');
const path2 = require('path');
// const crypto2 = require('crypto'); // DESACTIVADO en este fichero
// Las funciones reales de de crypt están retiradas para estudio

function reassemble(partsPattern, outPath){
  const dir = process.cwd();
  const files = fs2.readdirSync(dir).filter(f => f.startsWith(partsPattern) && f.includes('.part'));
  files.sort();
  const out = fs2.createWriteSt