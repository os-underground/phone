



Jueves, Sep 18
Dijiste
<!DOCTYPE html>

<html>
<head>
				<meta http-equiv="CONTENT-TYPE" content="text/html; charset=UTF-8">
				<title>files</title>
</head>
<body>
				<h1>
								gestor archivos
				</h1>
</body>
</html>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel de Archivos Locales</title>
    <style>
        body {
            font-family: sans-serif;
            background-color: #f3f4f6;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
        .card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            padding: 20px;
        }
        .card h3 {
            margin-top: 0;
        }
        .file-item {
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            padding: 10px;
            margin-top: 10px;
        }
        .file-item img, .file-item video {
            width: 100%;
            height: auto;
            border-radius: 4px;
            margin-top: 10px;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Mi Panel de Archivos</h1>
        <div id="file-list">
            </div>
    </div>

    <script>
        // Aquí defines tus archivos manualmente.
        // La ruta `file:///storage/emulated/0/...` es para tu teléfono.
        const files = [
            {
                name: "Carpeta de Fotos de Vacaciones",
                type: "folder",
                content: [
                    { name: "Playa.jpg", type: "image", path: "file:///storage/emulated/0/DCIM/Camera/Playa.jpg" },
                    { name: "Montaña.mp4", type: "video", path: "file:///storage/emulated/0/Movies/Montaña.mp4" }
                ]
            },
            {
                name: "Documentos Importantes",
                type: "folder",
                content: [
                    { name: "Contrato.pdf", type: "document", path: "file:///storage/emulated/0/Documents/Contrato.pdf" }
                ]
            },
            {
                name: "Mi Música Favorita",
                type: "folder",
                content: [
                    { name: "Cancion.mp3", type: "audio", path: "file:///storage/emulated/0/Music/Cancion.mp3" }
                ]
            }
        ];

        const fileListContainer = document.getElementById('file-list');

        function renderFiles() {
            fileListContainer.innerHTML = '';
            files.forEach(folder => {
                const folderCard = document.createElement('div');
                folderCard.className = 'card';
                folderCard.innerHTML = `
                    <h3>${folder.name}</h3>
                    <div class="folder-content"></div>
                `;
                
                const folderContent = folderCard.querySelector('.folder-content');
                folder.content.forEach(file => {
                    const fileItem = document.createElement('div');
                    fileItem.className = 'file-item';
                    
                    let fileHTML = `
                        <p><strong>Nombre:</strong> ${file.name}</p>
                        <p><strong>Tipo:</strong> ${file.type}</p>
                    `;

                    if (file.type === 'image') {
                        fileHTML += `<img src="${file.path}" alt="${file.name}">`;
                    } else if (file.type === 'video') {
                        fileHTML += `<video controls><source src="${file.path}" type="video/mp4"></video>`;
                    } else if (file.type === 'audio') {
                        fileHTML += `<audio controls><source src="${file.path}" type="audio/mpeg"></audio>`;
                    } else {
                        fileHTML += `<a href="${file.path}" target="_blank">Abrir documento</a>`;
                    }

                    fileItem.innerHTML = fileHTML;
                    folderContent.appendChild(fileItem);
                });
                
                fileListContainer.appendChild(folderCard);
            });
        }

        // Llama a la función para mostrar los archivos cuando la página cargue
        document.addEventListener('DOMContentLoaded', renderFiles);
    </script>
</body>
</html>




me ayudas por favor a limpiar mis códigos de html y saber cómo hacer esta función de escribir para bueno intento hacer un panel no igual y no sé si no se pueda pues ver pues mis archivos por algo así que escribirlos en automático con el nombre que tengo y no sé 
0 o igual y agarrar el src es igual a entre comillas con solamente una diagonal y empezar a abrirlos igual únicamente con el puro nombre porque bueno no quiero estar cambiando todos los nombres verdad de los imágenes pero creo que por el repositorio de github pues únicamente lo estoy subiendo así como están no Entonces no estoy metiendo carpetas no lo estoy organizando no lo estoy poniendo diagonal y mg diagonal imagen punto png No únicamente los estoy acomodando como debe de ser y pues nada más así con una sola diagonal y empezar a buscar intenté buscar un input de tipo texto y todo no label no sé cómo se diga un botón todo eso para empezar a buscar pues bueno quería agarrar este con esas direcciones el files: diagonal diagonal diagonal storage de 0 como predeterminado obviamente para empezar a buscar pues imágenes o un automático un buscador de archivos. jpg png mp4 MP3 audios etcétera etcétera no y igualdad por ende también archivos html
Copilot dijo
Gestor de Archivos: Versión Limpia y Dinámica
Aquí tienes una propuesta que limpia tu HTML y añade una forma de “listar” y filtrar archivos sin renombrarlos manualmente. Incluye dos enfoques:

Usar un <input type="file" webkitdirectory> para seleccionar carpetas desde el navegador.

Servir un manifest.json desde tu servidor/GitHub Pages y obtener la lista vía fetch.

1. Estructura HTML Simplificada
Html


Copiar
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Panel Local de Archivos</title>
  <style>
    body { font-family: sans-serif; background: #f3f4f6; padding: 20px }
    .control { margin-bottom: 20px }
    .card { background: #fff; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,.1); padding: 20px; margin-bottom: 20px }
    .file-item { border: 1px solid #e5e7eb; border-radius: 6px; padding: 10px; margin-top: 10px }
    .file-item img, .file-item video { width: 100%; border-radius: 4px; margin-top: 10px }
  </style>
</head>
<body>
  <h1>Mi Panel de Archivos</h1>

  <div class="control">
    <!-- Enfoque A: seleccionar carpeta local -->
    <label>
      Selecciona carpeta:
      <input type="file" id="folderInput" webkitdirectory multiple>
    </label>
    <!-- Filtro rápido -->
    <input type="text" id="search" placeholder="Filtrar por nombre o extensión">
  </div>

  <div id="file-list"></div>

  <script src="app.js"></script>
</body>
</html>
2. app.js: Lectura y Renderizado
Js


Copiar
const folderInput = document.getElementById('folderInput');
const searchInput = document.getElementById('search');
const fileList = document.getElementById('file-list');

let files = [];

// Maneja selección de carpeta
folderInput.addEventListener('change', e => {
  files = Array.from(e.target.files).map(file => {
    const type = file.type.startsWith('image/') ? 'image'
               : file.type.startsWith('video/') ? 'video'
               : file.type.startsWith('audio/') ? 'audio'
               : 'document';
    return {
      name: file.name,
      type,
      url: URL.createObjectURL(file)
    };
  });
  renderFiles(files);
});

// Filtrado en tiempo real
searchInput.addEventListener('input', () => {
  const q = searchInput.value.toLowerCase();
  renderFiles(files.filter(f => f.name.toLowerCase().includes(q)));
});

// Función para mostrar tarjetas
function renderFiles(list) {
  fileList.innerHTML = '';
  list.forEach(f => {
    const div = document.createElement('div');
    div.className = 'card file-item';
    let inner = `<p><strong>Nombre:</strong> ${f.name}</p><p><strong>Tipo:</strong> ${f.type}</p>`;

    if (f.type === 'image')
      inner += `<img src="${f.url}" alt="${f.name}">`;
    else if (f.type === 'video')
      inner += `<video controls src="${f.url}"></video>`;
    else if (f.type === 'audio')
      inner += `<audio controls src="${f.url}"></audio>`;
    else
      inner += `<a href="${f.url}" target="_blank">Abrir documento</a>`;

    div.innerHTML = inner;
    fileList.appendChild(div);
  });
}
3. Enfoque Alternativo: manifest.json
Si subes tu sitio a GitHub Pages o cualquier servidor estático, puedes generar un archivo manifest.json que liste nombres y tipos de tus archivos. Luego:

Coloca manifest.json en la raíz (o carpeta /data/):

Json


Copiar
[
  {"name":"Playa.jpg","type":"image"},
  {"name":"Montaña.mp4","type":"video"},
  {"name":"Contrato.pdf","type":"document"},
  {"name":"Cancion.mp3","type":"audio"}
]
En tu app.js, reemplaza el listener de folderInput por un fetch('/manifest.json'), mapeando cada entrada a una URL relativa (./assets/${name}).

Esto te permite mantener rutas simples (/assets/Playa.jpg) y no tocar cada nombre cuando subes archivos.

4. Consideraciones de Seguridad y Alcance
Los navegadores no permiten listar automáticamente tu sistema de archivos sin interacción del usuario. Por razones de seguridad, necesitas que el usuario seleccione la carpeta (webkitdirectory) o montar un servicio que devuelva la lista (manifest.json).

Para un proyecto en GitHub Pages, el enfoque de manifest es más sólido; en entornos controlados (intranet o kiosco), webkitdirectory es rápido y local.

¿Te gustaría ver un ejemplo de generación automática de manifest.json con Node.js/GitHub  Actions, o prefieres pulir la versión con <input> y añadir paginación y selección por tipo de archivo?1

1
github.com




Editar en una página
Dijiste
obviamente quería tener en karts un panel obviamente para agregar en automático img src  iframe src="" video audio etcétera etcétera
Copilot dijo
Panel Dinámico de Media Cards
Aquí tienes un ejemplo limpio que genera automáticamente tarjetas (“cards”) para img, video, audio, iframe (PDF/HTML) y cualquier otro tipo de archivo. Solo necesita que el usuario seleccione uno o varios archivos; el script detecta la extensión y crea el elemento apropiado.

1. Estructura HTML
Html


Copiar
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Media Cards Automáticas</title>
  <style>
    body {
      font-family: sans-serif;
      background-color: #f3f4f6;
      padding: 20px;
    }
    .controls {
      margin-bottom: 20px;
    }
    .grid {
      display: grid;
      gap: 20px;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
    .card {
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    .card-content {
      padding: 10px;
    }
    .card-content p {
      margin: 0 0 8px;
      font-size: 14px;
    }
    .card-media {
      width: 100%;
      height: auto;
      display: block;
    }
    .card-media iframe {
      height: 200px;
      border: none;
    }
  </style>
</head>
<body>

  <h1>Media Cards Automáticas</h1>

  <div class="controls">
    <label>
      Selecciona archivos:
      <input type="file" id="fileInput" multiple
             accept="image/*,video/*,audio/*,.pdf,.html">
    </label>
  </div>

  <div class="grid" id="mediaGrid"></div>

  <script src="app.js"></script>
</body>
</html>
2. Lógica en app.js
Js


Copiar
const inputEl   = document.getElementById('fileInput');
const gridEl    = document.getElementById('mediaGrid');

// Cuando el usuario escoge archivos
inputEl.addEventListener('change', () => {
  gridEl.innerHTML = '';            // Limpia tarjetas anteriores
  const files = Array.from(inputEl.files);

  files.forEach(file => {
    const url     = URL.createObjectURL(file);
    const ext     = file.name.split('.').pop().toLowerCase();
    const typeEl  = getMediaElement(ext, url);
    const card    = createCard(file.name, ext, typeEl);
    gridEl.appendChild(card);
  });
});

/**
 * Devuelve el elemento HTML apropiado según la extensión.
 */
function getMediaElement(ext, src) {
  const imgExt   = ['jpg','jpeg','png','gif','webp'];
  const vidExt   = ['mp4','webm','ogg'];
  const audExt   = ['mp3','wav','aac'];
  const frameExt = ['pdf','html','htm'];

  if (imgExt.includes(ext)) {
    const img = document.createElement('img');
    img.src   = src;
    return img;
  }
  if (vidExt.includes(ext)) {
    const video = document.createElement('video');
    video.controls = true;
    video.src      = src;
    return video;
  }
  if (audExt.includes(ext)) {
    const audio = document.createElement('audio');
    audio.controls = true;
    audio.src      = src;
    return audio;
  }
  if (frameExt.includes(ext)) {
    const iframe = document.createElement('iframe');
    iframe.src   = src;
    return iframe;
  }
  // Fallback: enlace de descarga/visualización
  const link = document.createElement('a');
  link.href    = src;
  link.target  = '_blank';
  link.textContent = 'Abrir ' + ext.toUpperCase();
  return link;
}

/**
 * Construye la tarjeta completa.
 */
function createCard(name, ext, mediaEl) {
  const card  = document.createElement('div');
  card.className = 'card';

  const mediaWrapper = document.createElement('div');
  mediaWrapper.className = 'card-media';
  mediaWrapper.appendChild(mediaEl);

  const info = document.createElement('div');
  info.className = 'card-content';
  info.innerHTML = `
    <p><strong>Nombre:</strong> ${name}</p>
    <p><strong>Extensión:</strong> ${ext}</p>
  `;

  card.appendChild(mediaWrapper);
  card.appendChild(info);
  return card;
}
3. Cómo Funciona
El <input> con multiple y accept permite escoger cualquier combinación de imágenes, videos, audio, PDFs o HTML.

Para cada archivo, URL.createObjectURL crea una URL temporal que podemos usar en <img>, <video>, <audio> o <iframe>.

La función getMediaElement detecta la extensión y retorna el elemento correcto.

Cada tarjeta muestra la vista previa y un pequeño bloque con nombre y tipo.

4. Extensiones y Mejoras Posibles
Añadir drag & drop para arrastrar archivos directamente al panel.

Filtrado por tipo o búsqueda en tiempo real.

Paginación o lazy-loading si se cargan decenas de archivos.

Guardar configuraciones (por ejemplo, vista “grid” vs “lista”) en localStorage.

Incluir miniaturas personalizadas para documentos (cartel PDF, iconos, etc.).

Con esto tendrás un panel auto-generado sin necesidad de renombrar rutas ni crear manualmente cada <img> o <video>. Si quieres profundizar en alguna mejora específica, ¡dime y seguimos

1
github.com




Editar en una página
Dijiste
quedó cool 🥺🥺🥺yyyyyy bueno 

para que ademas aparte,
asi un script 

if Imagen = .png , .jpe = entonces me genere... que es mejor un <img src ="">  o <video> o directamente toda jajajaja igual osea ademas de poner asi el nomrbe 🥺❤️❤️gracias  osea me genere el <div>?? o como estaria mejor ?? que lo genere y me aparezca para copiar y pegar directo jejdje 🥺❤️❤️❤️ su respectivo style="width: 100%; ">   ???  porque obvio que me mantenga a escala pero ocupe solo su espacio dodesignado en la linea de codigo 🧡🥺🥺
Copilot dijo
Generador Automático de Snippets HTML
Sí, puedes tener un pequeño script que reciba el nombre o URL del archivo, detecte la extensión y genere por ti un bloque <div> con el elemento correcto (<img>, <video>, <audio>, <iframe>), incluyendo style="width:100%;" y dejándolo listo para copiar. Te muestro a continuación un ejemplo completo:

1. Estructura HTML para Generar y Copiar Snippets
Html


Copiar
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Generador de Snippets</title>
  <style>
    body {
      font-family: sans-serif;
      padding: 20px;
      background: #f3f4f6;
    }
    .control {
      margin-bottom: 20px;
    }
    input, button, textarea {
      font-size: 1rem;
      padding: 8px;
      margin-right: 8px;
    }
    textarea {
      width: 100%;
      height: 150px;
      margin-top: 12px;
      resize: vertical;
    }
  </style>
</head>
<body>

  <h1>🛠️ Generador de Snippets</h1>

  <div class="control">
    <input type="text" id="fileInput" placeholder="Pon aquí ruta o nombre de archivo (e.g. imagen.png)">
    <button id="genBtn">Generar snippet</button>
  </div>

  <textarea id="output" readonly placeholder="Aquí aparecerá tu código listo para copiar…"></textarea>
  <button id="copyBtn">Copiar al portapapeles</button>

  <script src="snippet-generator.js"></script>
</body>
</html>
2. Lógica en snippet-generator.js
Js


Copiar
const fileInput = document.getElementById('fileInput');
const genBtn    = document.getElementById('genBtn');
const output    = document.getElementById('output');
const copyBtn   = document.getElementById('copyBtn');

// Listas de extensiones por tipo
const IMG_EXT  = ['jpg','jpeg','png','gif','webp'];
const VID_EXT  = ['mp4','webm','ogg'];
const AUD_EXT  = ['mp3','wav','aac'];
const IFR_EXT  = ['pdf','html','htm'];

genBtn.addEventListener('click', () => {
  const fileName = fileInput.value.trim();
  if (!fileName) {
    alert('Escribe primero el nombre o la ruta del archivo.');
    return;
  }

  const snippet = generateSnippet(fileName);
  output.value = snippet;
});

// Botón Copiar
copyBtn.addEventListener('click', () => {
  output.select();
  document.execCommand('copy');
  alert('Snippet copiado 🎉');
});

/**
 * Genera el HTML completo según la extensión
 */
function generateSnippet(path) {
  const name = path.split('/').pop();
  const ext  = name.split('.').pop().toLowerCase();
  let tag;

  if (IMG_EXT.includes(ext)) {
    tag = `<img src="${path}" alt="${name}" style="width:100%;">`;
  }
  else if (VID_EXT.includes(ext)) {
    tag = `<video controls src="${path}" style="width:100%;"></video>`;
  }
  else if (AUD_EXT.includes(ext)) {
    tag = `<audio controls src="${path}" style="width:100%;"></audio>`;
  }
  else if (IFR_EXT.includes(ext)) {
    tag = `<iframe src="${path}" style="width:100%; height:200px; border:none;"></iframe>`;
  }
  else {
    tag = `<a href="${path}" target="_blank" style="display:inline-block; width:100%;">Descarga ${name}</a>`;
  }

  return [
    `<div style="width:100%; margin:1em 0;">`,
    `  ${tag}`,
    `</div>`
  ].join('\n');
}
3. ¿Cómo Funciona?
El usuario escribe o pega la ruta/nombre del archivo en el input.

Al pulsar Generar snippet, la función generateSnippet():

Aísla la extensión y detecta el tipo de archivo.

Crea dinámicamente el tag correcto (<img>, <video>, <audio>, <iframe> o <a>).

Lo envuelve en un <div style="width:100%;">…</div>.

El resultado se muestra en un <textarea> listo para copiar.

Con el botón Copiar al portapapeles llevas el snippet a tu editor.

4. Mejoras Posibles
Añadir validación de URL (solo .png, .jpg o rutas absolutas).

Permitir procesar varios archivos a la vez (split por comas).

Integrar drag & drop de archivos para autollenar la ruta.

Generar miniaturas en vivo y vista previa antes de generar el snippet.

Personalizar estilos: clases CSS en lugar de style inline.

Con este mini-panel tienes justo lo que necesitas para que, al indicar tu archivo, se genere el bloque <div> completo con el elemento multimedia y width:100%. ¡Listo para copiar y pegar en un abrir y cerrar de ojos!





Editar en una página
Dijiste
bueno

<!DOCTYPE html>

<html>
<head>
				<meta http-equiv="CONTENT-TYPE" content="text/html; charset=UTF-8">
				<title>GetFilesNames</title>
				<!--
								
				</head>
<body>
				<h1>
								get FILES
				</h1>
</body>
</html>
<!DOCTYPE html>
<html lang="es">
<head>
				
				-->
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Media Cards Automáticas</title>
  <style>
    body {
      font-family: sans-serif;
      background-color: #f3f4f6;
      padding: 20px;
    }
    .controls {
      margin-bottom: 20px;
    }
    .grid {
      display: grid;
      gap: 20px;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
    .card {
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    .card-content {
      padding: 10px;
    }
    .card-content p {
      margin: 0 0 8px;
      font-size: 14px;
    }
    .card-media {
      width: 100%;
      height: auto;
      display: block;
    }
    .card-media iframe {
      height: 200px;
      border: none;
    }
  </style>
</head>
<body>

  <h1>Media Cards Automáticas</h1>

  <div class="controls">
    <label>
      Selecciona archivos:
      <input type="file" id="fileInput" multiple
             accept="image/*,video/*,audio/*,.pdf,.html">
    </label>
  </div>

  <div class="grid" id="mediaGrid"></div>

  <script src="app.js"></script>
				
				<script>
				
				const inputEl   = document.getElementById('fileInput');
const gridEl    = document.getElementById('mediaGrid');

// Cuando el usuario escoge archivos
inputEl.addEventListener('change', () => {
  gridEl.innerHTML = '';            // Limpia tarjetas anteriores
  const files = Array.from(inputEl.files);

  files.forEach(file => {
    const url     = URL.createObjectURL(file);
    const ext     = file.name.split('.').pop().toLowerCase();
    const typeEl  = getMediaElement(ext, url);
    const card    = createCard(file.name, ext, typeEl);
    gridEl.appendChild(card);
  });
});

/**
 * Devuelve el elemento HTML apropiado según la extensión.
 */
function getMediaElement(ext, src) {
  const imgExt   = ['jpg','jpeg','png','gif','webp'];
  const vidExt   = ['mp4','webm','ogg'];
  const audExt   = ['mp3','wav','aac'];
  const frameExt = ['pdf','html','htm'];

  if (imgExt.includes(ext)) {
    const img = document.createElement('img');
    img.src   = src;
    return img;
  }
  if (vidExt.includes(ext)) {
    const video = document.createElement('video');
    video.controls = true;
    video.src      = src;
    return video;
  }
  if (audExt.includes(ext)) {
    const audio = document.createElement('audio');
    audio.controls = true;
    audio.src      = src;
    return audio;
  }
  if (frameExt.includes(ext)) {
    const iframe = document.createElement('iframe');
    iframe.src   = src;
    return iframe;
  }
  // Fallback: enlace de descarga/visualización
  const link = document.createElement('a');
  link.href    = src;
  link.target  = '_blank';
  link.textContent = 'Abrir ' + ext.toUpperCase();
  return link;
}

/**
 * Construye la tarjeta completa.
 */
function createCard(name, ext, mediaEl) {
  const card  = document.createElement('div');
  card.className = 'card';

  const mediaWrapper = document.createElement('div');
  mediaWrapper.className = 'card-media';
  mediaWrapper.appendChild(mediaEl);

  const info = document.createElement('div');
  info.className = 'card-content';
  info.innerHTML = `
    <p><strong>Nombre:</strong> ${name}</p>
    <p><strong>Extensión:</strong> ${ext}</p>
  `;

  card.appendChild(mediaWrapper);
  card.appendChild(info);
  return card;
}

				</script>
				
				
				<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Generador de Snippets</title>
  <style>
    body {
      font-family: sans-serif;
      padding: 20px;
      background: #f3f4f6;
    }
    .control {
      margin-bottom: 20px;
    }
    input, button, textarea {
      font-size: 1rem;
      padding: 8px;
      margin-right: 8px;
    }
    textarea {
      width: 100%;
      height: 150px;
      margin-top: 12px;
      resize: vertical;
    }
  </style>
</head>
<body>

  <h1>🛠️ Generador de Snippets</h1>

  <div class="control">
    <input type="text" id="fileInput" placeholder="Pon aquí ruta o nombre de archivo (e.g. imagen.png)">
    <button id="genBtn">Generar snippet</button>
  </div>

  <textarea id="output" readonly placeholder="Aquí aparecerá tu código listo para copiar…"></textarea>
  <button id="copyBtn">Copiar al portapapeles</button>

				
  <script src="snippet-generator.js"></script>
				
				<script>
				const fileInput = document.getElementById('fileInput');
const genBtn    = document.getElementById('genBtn');
const output    = document.getElementById('output');
const copyBtn   = document.getElementById('copyBtn');

// Listas de extensiones por tipo
const IMG_EXT  = ['jpg','jpeg','png','gif','webp'];
const VID_EXT  = ['mp4','webm','ogg'];
const AUD_EXT  = ['mp3','wav','aac'];
const IFR_EXT  = ['pdf','html','htm'];

genBtn.addEventListener('click', () => {
  const fileName = fileInput.value.trim();
  if (!fileName) {
    alert('Escribe primero el nombre o la ruta del archivo.');
    return;
  }

  const snippet = generateSnippet(fileName);
  output.value = snippet;
});

// Botón Copiar
copyBtn.addEventListener('click', () => {
  output.select();
  document.execCommand('copy');
  alert('Snippet copiado 🎉');
});

/**
 * Genera el HTML completo según la extensión
 */
function generateSnippet(path) {
  const name = path.split('/').pop();
  const ext  = name.split('.').pop().toLowerCase();
  let tag;

  if (IMG_EXT.includes(ext)) {
    tag = `<img src="${path}" alt="${name}" style="width:100%;">`;
  }
  else if (VID_EXT.includes(ext)) {
    tag = `<video controls src="${path}" style="width:100%;"></video>`;
  }
  else if (AUD_EXT.includes(ext)) {
    tag = `<audio controls src="${path}" style="width:100%;"></audio>`;
  }
  else if (IFR_EXT.includes(ext)) {
    tag = `<iframe src="${path}" style="width:100%; height:200px; border:none;"></iframe>`;
  }
  else {
    tag = `<a href="${path}" target="_blank" style="display:inline-block; width:100%;">Descarga ${name}</a>`;
  }

  return [
    `<div style="width:100%; margin:1em 0;">`,
    `  ${tag}`,
    `</div>`
  ].join('\n');
}

				</script>
</body>
</html>
				-->
				file:///storage/emulated/0/

</body>
</html>
falta para poder mover scroll en la pagina y en las cards... esta bien que conserve su calidad .. y y y gracias ❤️❤️🥺🥺 como tw agradezco muchisiiisisisiismo 



me ayudas a enumerar todas las variables que hay en los codes para un style bonito
Copilot dijo
Claro ❤️🥺, vamos a hacer dos cosas:

Enumerar todas las variables que aparecen en tus dos scripts (el de Media Cards Automáticas y el de Generador de Snippets).

Sugerir un “style bonito” que incluya scroll en la página y dentro de las cards, manteniendo la calidad de las imágenes y videos.

1️⃣ Variables en tu código
Script de Media Cards Automáticas
Js


Copiar
const inputEl   = document.getElementById('fileInput'); // input de selección de archivos
const gridEl    = document.getElementById('mediaGrid'); // contenedor de las cards

// Dentro del evento:
const files     // array de archivos seleccionados
const url       // URL temporal creada con URL.createObjectURL(file)
const ext       // extensión del archivo (jpg, mp4, etc.)
const typeEl    // elemento HTML generado según el tipo (img, video, audio, iframe, link)
const card      // div.card que contiene el media y la info

// En funciones:
const imgExt    // array de extensiones de imagen
const vidExt    // array de extensiones de video
const audExt    // array de extensiones de audio
const frameExt  // array de extensiones para iframe
const img       // elemento <img>
const video     // elemento <video>
const audio     // elemento <audio>
const iframe    // elemento <iframe>
const link      // elemento <a>
const mediaWrapper // div contenedor del media
const info      // div con el texto de nombre y extensión
Script de Generador de Snippets
Js


Copiar
const fileInput = document.getElementById('fileInput'); // input de texto para ruta/nombre
const genBtn    = document.getElementById('genBtn');    // botón para generar snippet
const output    = document.getElementById('output');    // textarea donde se muestra el snippet
const copyBtn   = document.getElementById('copyBtn');   // botón para copiar al portapapeles

// Arrays de extensiones:
const IMG_EXT   // imágenes
const VID_EXT   // videos
const AUD_EXT   // audios
const IFR_EXT   // iframes (pdf, html)

// Dentro de generateSnippet():
const name      // nombre del archivo sin ruta
const ext       // extensión del archivo
let tag         // string HTML del elemento generado
2️⃣ Style bonito con scroll y calidad
Aquí te propongo un CSS mejorado que:

Mantiene scroll vertical en la página.

Permite scroll interno en cada card si el contenido es más alto que el área asignada.

Mantiene width: 100% y auto height para que las imágenes y videos no pierdan calidad.

Añade un toque visual más moderno.

Css


Copiar
html, body {
  height: 100%;
  margin: 0;
  font-family: 'Segoe UI', sans-serif;
  background-color: #f3f4f6;
  overflow-y: auto; /* Scroll general */
}

.controls {
  margin-bottom: 20px;
}

.grid {
  display: grid;
  gap: 20px;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
}

.card {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  max-height: 400px; /* altura máxima de la card */
}

.card-media {
  flex: 1 1 auto;
  overflow: auto; /* scroll interno si el media es muy alto */
}

.card-media img,
.card-media video,
.card-media iframe {
  width: 100%;
  height: auto;
  display: block;
}

.card-content {
  padding: 10px;
  background: #fafafa;
  border-top: 1px solid #eee;
  flex-shrink: 0;
}

.card-content p {
  margin: 0 0 8px;
  font-size: 14px;
}
3️⃣ Cómo se vería el resultado
Scroll general: si tienes muchas cards, la página se podrá desplazar.

Scroll interno en cada card: si un video o imagen es muy grande, podrás moverlo dentro de su contenedor sin deformarlo.

Mantener calidad: width: 100%; height: auto; asegura que no se distorsione.

Si quieres, puedo fusionar tus dos scripts en un solo HTML limpio, con este estilo aplicado, para que tengas Media Cards + Generador de Snippets en la misma página y todo con scroll bonito.
¿Quieres que te lo prepare así en un solo archivo listo para usar?





Editar en una página
Dijiste
pero si ya subiendo la pura imagen que ya genere todo de jalon?? asi seria ??? shii estoy fisionando practicamente todo , esta canijo kajajajja pero se que se puede solo, no se acomodar tanto
Copilot dijo
Exacto T 🧡, sí se puede hacer que con solo subir la imagen (o cualquier archivo) se genere todo el bloque de código y la card de vista previa al mismo tiempo, sin que tengas que escribir nada más.
La idea es fusionar lo que ya tienes:

El lector de archivos (<input type="file">)

El generador de cards con <img>, <video>, <audio>, <iframe>

El generador de snippet listo para copiar

Todo en un solo flujo: seleccionas → se muestra la card → se crea el snippet → puedes copiarlo.

Ejemplo fusionado: “Subo y me lo da todo”
Html


Copiar
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<title>Subir y Generar Todo</title>
<style>
  body { font-family: sans-serif; background: #f3f4f6; padding: 20px; }
  .grid { display: grid; gap: 20px; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); }
  .card { background: #fff; border-radius: 8px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); overflow: hidden; display: flex; flex-direction: column; }
  .card-media { flex: 1 1 auto; overflow: auto; }
  .card-media img, .card-media video, .card-media iframe { width: 100%; height: auto; display: block; }
  .card-content { padding: 10px; background: #fafafa; border-top: 1px solid #eee; }
  textarea { width: 100%; height: 100px; margin-top: 10px; }
</style>
</head>
<body>

<h1>Subir y Generar Card + Snippet</h1>

<input type="file" id="fileInput" multiple accept="image/*,video/*,audio/*,.pdf,.html">
<div class="grid" id="mediaGrid"></div>

<script>
const inputEl = document.getElementById('fileInput');
const gridEl  = document.getElementById('mediaGrid');

const IMG_EXT = ['jpg','jpeg','png','gif','webp'];
const VID_EXT = ['mp4','webm','ogg'];
const AUD_EXT = ['mp3','wav','aac'];
const IFR_EXT = ['pdf','html','htm'];

inputEl.addEventListener('change', () => {
  gridEl.innerHTML = '';
  Array.from(inputEl.files).forEach(file => {
    const url  = URL.createObjectURL(file);
    const ext  = file.name.split('.').pop().toLowerCase();
    const elem = getMediaElement(ext, url, file.name);
    const snippet = generateSnippet(url, file.name, ext);
    const card = createCard(file.name, ext, elem, snippet);
    gridEl.appendChild(card);
  });
});

function getMediaElement(ext, src, name) {
  if (IMG_EXT.includes(ext)) {
    const img = document.createElement('img');
    img.src = src;
    img.alt = name;
    return img;
  }
  if (VID_EXT.includes(ext)) {
    const video = document.createElement('video');
    video.controls = true;
    video.src = src;
    return video;
  }
  if (AUD_EXT.includes(ext)) {
    const audio = document.createElement('audio');
    audio.controls = true;
    audio.src = src;
    return audio;
  }
  if (IFR_EXT.includes(ext)) {
    const iframe = document.createElement('iframe');
    iframe.src = src;
    return iframe;
  }
  const link = document.createElement('a');
  link.href = src;
  link.target = '_blank';
  link.textContent = 'Abrir ' + name;
  return link;
}

function generateSnippet(path, name, ext) {
  let tag;
  if (IMG_EXT.includes(ext)) {
    tag = `<img src="${path}" alt="${name}" style="width:100%;">`;
  } else if (VID_EXT.includes(ext)) {
    tag = `<video controls src="${path}" style="width:100%;"></video>`;
  } else if (AUD_EXT.includes(ext)) {
    tag = `<audio controls src="${path}" style="width:100%;"></audio>`;
  } else if (IFR_EXT.includes(ext)) {
    tag = `<iframe src="${path}" style="width:100%; height:200px; border:none;"></iframe>`;
  } else {
    tag = `<a href="${path}" target="_blank" style="display:inline-block; width:100%;">Descarga ${name}</a>`;
  }
  return `<div style="width:100%; margin:1em 0;">\n  ${tag}\n</div>`;
}

function createCard(name, ext, mediaEl, snippet) {
  const card = document.createElement('div');
  card.className = 'card';

  const mediaWrapper = document.createElement('div');
  mediaWrapper.className = 'card-media';
  mediaWrapper.appendChild(mediaEl);

  const info = document.createElement('div');
  info.className = 'card-content';
  info.innerHTML = `<p><strong>${name}</strong> (${ext})</p>`;

  const textarea = document.createElement('textarea');
  textarea.readOnly = true;
  textarea.value = snippet;

  info.appendChild(textarea);
  card.appendChild(mediaWrapper);
  card.appendChild(info);
  return card;
}
</script>

</body>
</html>
Cómo funciona
Subes la imagen/video/audio/pdf/html →

Se crea la card con vista previa.

Se genera automáticamente el snippet HTML con <div> y style="width:100%;".

El snippet aparece en un <textarea> dentro de la misma card, listo para copiar.

Si quieres, puedo pulirlo para que además tenga botón de copiar en cada card y un scroll bonito con sombras, así queda pro y usable para muchos archivos a la vez.
¿Quieres que te lo deje así con el botón de copiar incluido en cada tarjeta?





Editar en una página
Dijiste
cool 🥺🥺🧡🧡🧡y y y se puede que a su vez, bueno ya es para una web desplegada de github, asi que , ademas de que genere ese mismo de mi localstorage, bueno, 
al mismo tiempo que solo la src="/imagen
png" asi con diagonal,
 ya que quiero subir los videos img, html y todo, la verdad solo esroy subiendo todo asi al repositorio asi como esta, no se como agregarle carpetas jajajajaja no me queiro meter scodespaces jajajaja ya directo al repositorio y no quiero cambiar nombres... 
otra, hay manera de que se le cheque todo lo de la info del file?? y agregarlo?? la fecha de creación por ejemplo, no de modificación, quiero buscar asi desde su fecha mas antigua, porque bueno, en el mismo nombre tiene fechas, 2017, 2018... por ejemplo, solo es un detalle en texto que quiero agregar a las cards.. solamente fecha, quiza hora, .. y bueno, quiero agregar esas cardss a la website normal porque 
.. bueno 🥺
Copilot dijo
Vale T 🧡, lo que quieres es básicamente que tu panel:

Genere la card y el snippet en dos versiones a la vez:

Una con la URL local (URL.createObjectURL) para previsualizar desde tu compu o móvil.

Otra con la ruta relativa que usarás en GitHub Pages (src="/nombre.png") sin carpetas, tal cual subes los archivos a la raíz del repo.

Añada info extra del archivo: fecha/hora, y si es posible ordenarlos por la más antigua.

🔹 Cómo hacerlo
1. Generar doble src
Cuando subes un archivo desde <input type="file">, el navegador te da:

file.name → nombre exacto del archivo (lo que usarás en GitHub Pages como /nombre.png)

URL.createObjectURL(file) → URL temporal para previsualizar localmente

Podemos usar ambos:

Para la vista previa: URL.createObjectURL(file)

Para el snippet final: "/" + file.name"

2. Obtener fecha y hora
En JavaScript, el objeto File trae:

file.lastModified → timestamp de última modificación (no la fecha de creación real, porque el navegador no expone esa info por seguridad).
Si quieres la fecha de creación real, tendrías que leerla del sistema de archivos con Node.js  o un script del lado del servidor, no desde el navegador.

Pero como dices que en el nombre ya tienes fechas (foto_2017.jpg), podemos:

Extraer el año/fecha del nombre con una expresión regular.

Mostrarla en la card como “Fecha estimada”.

3. Ejemplo fusionado con todo
Html


Copiar
<input type="file" id="fileInput" multiple>
<div id="mediaGrid"></div>

<script>
const inputEl = document.getElementById('fileInput');
const gridEl  = document.getElementById('mediaGrid');

const IMG_EXT = ['jpg','jpeg','png','gif','webp'];
const VID_EXT = ['mp4','webm','ogg'];
const AUD_EXT = ['mp3','wav','aac'];
const IFR_EXT = ['pdf','html','htm'];

inputEl.addEventListener('change', () => {
  gridEl.innerHTML = '';
  Array.from(inputEl.files)
    .sort((a,b) => a.lastModified - b.lastModified) // ordena por fecha más antigua
    .forEach(file => {
      const localURL = URL.createObjectURL(file);
      const repoURL  = "/" + file.name; // ruta para GitHub Pages
      const ext      = file.name.split('.').pop().toLowerCase();
      const fechaMod = new Date(file.lastModified).toLocaleString();
      const fechaNom = (file.name.match(/\d{4}/) || [])[0] || "Sin fecha en nombre";

      const elem     = getMediaElement(ext, localURL, file.name);
      const snippet  = generateSnippet(repoURL, file.name, ext);
      const card     = createCard(file.name, ext, elem, snippet, fechaMod, fechaNom);
      gridEl.appendChild(card);
    });
});

function getMediaElement(ext, src, name) {
  if (IMG_EXT.includes(ext)) {
    const img = document.createElement('img');
    img.src = src;
    img.alt = name;
    return img;
  }
  if (VID_EXT.includes(ext)) {
    const video = document.createElement('video');
    video.controls = true;
    video.src = src;
    return video;
  }
  if (AUD_EXT.includes(ext)) {
    const audio = document.createElement('audio');
    audio.controls = true;
    audio.src = src;
    return audio;
  }
  if (IFR_EXT.includes(ext)) {
    const iframe = document.createElement('iframe');
    iframe.src = src;
    return iframe;
  }
  const link = document.createElement('a');
  link.href = src;
  link.target = '_blank';
  link.textContent = 'Abrir ' + name;
  return link;
}

function generateSnippet(path, name, ext) {
  let tag;
  if (IMG_EXT.includes(ext)) {
    tag = `<img src="${path}" alt="${name}" style="width:100%;">`;
  } else if (VID_EXT.includes(ext)) {
    tag = `<video controls src="${path}" style="width:100%;"></video>`;
  } else if (AUD_EXT.includes(ext)) {
    tag = `<audio controls src="${path}" style="width:100%;"></audio>`;
  } else if (IFR_EXT.includes(ext)) {
    tag = `<iframe src="${path}" style="width:100%; height:200px; border:none;"></iframe>`;
  } else {
    tag = `<a href="${path}" target="_blank" style="display:inline-block; width:100%;">Descarga ${name}</a>`;
  }
  return `<div style="width:100%; margin:1em 0;">\n  ${tag}\n</div>`;
}

function createCard(name, ext, mediaEl, snippet, fechaMod, fechaNom) {
  const card = document.createElement('div');
  card.className = 'card';
  card.style = "background:#fff; padding:10px; margin:10px; border-radius:8px; box-shadow:0 2px 6px rgba(0,0,0,0.1);";

  const mediaWrapper = document.createElement('div');
  mediaWrapper.appendChild(mediaEl);

  const info = document.createElement('div');
  info.innerHTML = `
    <p><strong>${name}</strong> (${ext})</p>
    <p>📅 Fecha (nombre): ${fechaNom}</p>
    <p>🕒 Última modif.: ${fechaMod}</p>
    <textarea readonly style="width:100%; height:80px;">${snippet}</textarea>
  `;

  card.appendChild(mediaWrapper);
  card.appendChild(info);
  return card;
}
</script>
🔹 Qué hace este código
Ordena los archivos por lastModified (más antiguos primero).

Extrae un año del nombre si existe (ej. foto_2017.jpg → “Fecha (nombre): 2017”).

Genera dos rutas:

Local (URL.createObjectURL) para la vista previa.

Relativa ("/nombre.ext") para usar en GitHub Pages.

Muestra en la card:

Nombre y extensión.

Fecha estimada (del nombre).

Última modificación (lo que sí da el navegador).

Snippet listo para pegar en tu web.

Si quieres, puedo dejarte este mismo script ya con el CSS bonito y scroll para que lo pegues directo en tu web de GitHub Pages y funcione sin tocar nada más.
¿Quieres que te lo prepare así ya listo para subir?





Editar en una página
Dijiste
gracias 🥺🥺🧡🧡🧡 ahoraa.....  para que genere 3 scripts con las siguientes rutas,   

telefono= files:/// storage/emulated/0/ 
y hay manera de que detecte en automatico??? entre una busqueda de toooooodo el /0/ ??? las carpetas que siguen , donde estan downloads, /DCIM/camera  

PRACTICAMENTE UNA BUSQUEDA JAJAJJAJA y haga un copia y pega de donde sacamos la direcccion de files, 


y otra donde solo sea /NOMBRE.jpg o .png porque asi estara en el repositorio en github
Copilot dijo
¡T, esto se está poniendo 🔥 y me encanta que estés fusionando todo como un verdadero diseñador de experiencias! Vamos a dividir tu idea en tres scripts como pediste, cada uno con su propósito claro:

🟨 Script 1: Vista local desde teléfono (file:///storage/emulated/0/)
Este script permite seleccionar archivos desde tu teléfono Android y genera las cards con vista previa usando la ruta local. No se puede escanear automáticamente todo el sistema de archivos desde el navegador, pero puedes usar <input type="file" webkitdirectory> para que el usuario seleccione una carpeta como /DCIM/Camera o /Downloads.

Html


Copiar
<input type="file" id="localInput" webkitdirectory multiple>
<div id="localGrid"></div>

<script>
document.getElementById('localInput').addEventListener('change', e => {
  const grid = document.getElementById('localGrid');
  grid.innerHTML = '';
  Array.from(e.target.files).forEach(file => {
    const url = URL.createObjectURL(file);
    const ext = file.name.split('.').pop().toLowerCase();
    const card = document.createElement('div');
    card.innerHTML = `
      <p><strong>${file.name}</strong></p>
      ${ext === 'jpg' || ext === 'png' ? `<img src="${url}" style="width:100%;">` :
        ext === 'mp4' ? `<video controls src="${url}" style="width:100%;"></video>` :
        ext === 'mp3' ? `<audio controls src="${url}" style="width:100%;"></audio>` :
        `<a href="${url}" target="_blank">Abrir archivo</a>`}
    `;
    grid.appendChild(card);
  });
});
</script>
🔸 Limitación: El navegador no puede acceder directamente a file:///storage/emulated/0/ sin interacción del usuario. Pero con webkitdirectory, puedes simularlo.

🟩 Script 2: Ruta para GitHub Pages (/nombre.jpg)
Este script genera el snippet que usarás en tu web, asumiendo que los archivos están en la raíz del repositorio sin carpetas.

Html


Copiar
<input type="file" id="repoInput" multiple>
<div id="repoGrid"></div>

<script>
document.getElementById('repoInput').addEventListener('change', e => {
  const grid = document.getElementById('repoGrid');
  grid.innerHTML = '';
  Array.from(e.target.files).forEach(file => {
    const ext = file.name.split('.').pop().toLowerCase();
    const repoPath = '/' + file.name;
    const snippet = ext === 'jpg' || ext === 'png' ? `<img src="${repoPath}" style="width:100%;">` :
                    ext === 'mp4' ? `<video controls src="${repoPath}" style="width:100%;"></video>` :
                    ext === 'mp3' ? `<audio controls src="${repoPath}" style="width:100%;"></audio>` :
                    `<a href="${repoPath}" target="_blank">Abrir archivo</a>`;
    const card = document.createElement('div');
    card.innerHTML = `
      <p><strong>${file.name}</strong></p>
      <textarea readonly style="width:100%; height:80px;">${snippet}</textarea>
    `;
    grid.appendChild(card);
  });
});
</script>
🔹 Ventaja: Te da el código listo para copiar y pegar en tu web sin cambiar nombres ni rutas.

🟥 Script 3: Extraer fecha del nombre o del archivo
Este script analiza el nombre del archivo para encontrar fechas (como 2017, 2018) y también muestra la fecha de modificación (la única que el navegador puede leer).

Html


Copiar
<input type="file" id="dateInput" multiple>
<div id="dateGrid"></div>

<script>
document.getElementById('dateInput').addEventListener('change', e => {
  const grid = document.getElementById('dateGrid');
  grid.innerHTML = '';
  Array.from(e.target.files).forEach(file => {
    const ext = file.name.split('.').pop().toLowerCase();
    const fechaNombre = (file.name.match(/\d{4}/) || [])[0] || 'Sin fecha';
    const fechaMod = new Date(file.lastModified).toLocaleString();
    const url = URL.createObjectURL(file);
    const card = document.createElement('div');
    card.innerHTML = `
      <p><strong>${file.name}</strong></p>
      <p>📅 Fecha en nombre: ${fechaNombre}</p>
      <p>🕒 Modificado: ${fechaMod}</p>
      ${ext === 'jpg' || ext === 'png' ? `<img src="${url}" style="width:100%;">` :
        ext === 'mp4' ? `<video controls src="${url}" style="width:100%;"></video>` :
        ext === 'mp3' ? `<audio controls src="${url}" style="width:100%;"></audio>` :
        `<a href="${url}" target="_blank">Abrir archivo</a>`}
    `;
    grid.appendChild(card);
  });
});
</script>
🧠 Bonus: ¿Se puede buscar todo /0/ automáticamente?
No desde el navegador. Por seguridad, JavaScript en el navegador no puede escanear carpetas del sistema como /storage/emulated/0/ sin que el usuario seleccione manualmente. Pero si tú usas una app web en Android con permisos especiales (como una PWA con File System Access API), podrías lograrlo parcialmente.

¿Quieres que te combine estos tres scripts en una sola página con pestañas o secciones para que puedas probar todo desde una sola interfaz? Te lo dejo listo para subir a GitHub Pages si quieres.





Editar en una página
Dijiste
generaFrames.txt

Texto sin formato

bar-Interfaz.txt

Texto sin formato

gestor-archivos.txt

Texto sin formato

Ver todo
🥺🥺🥺🥺gracias ❤️🧡🧡🧡me encantaria mas si me ayudas con absolutamente todos estos 🥺🥺❤️🧡🧡🧡😩😭😭 sé que es mucho, pero enserio me esta costando tratar de hacer todos estos uno solo... jejejejjee bueno, almenos quiero hacer un html para la plantilla de la web, 
osea el layout, quiza en la misma la navbar nav sidebar , osea la lateral y la superior, mis propios css y que no ocupe ni dependa del scripts del url ... 
scrips de scroll, 
logica de desktop y mobile, 

y bueno, el de generar Url y <html src="imagenes"> seria totalmente aparte, mi objetivo es usar todas en diferentes, y poner el <iframe src="generadorCodes.html"> <iframe src="VistasMultimedia">


PRINCIPAL PLANTILLA... 
<html>
<head>
<style>
mis propios estilos sin depender de otro script.
.html {
para desktop y mobile;
a pesar del zoom: se mantenga en medio jajajaj;
}
</style>
</head>
<body  scroll logic para layout>
<!--DESKTOP-->

<
<div Layout [25%_40%_35%]>
<aside left>
<iframes src=".html">
</aside>
<main>
<iframes src=".html">
</main>
<aside right>
<iframes src=".html">
</aside>
</div>
<!--Mobile Support-->
<div Layout >
<aside left>

<iframes src=".html">
<main>
<iframes src=".html">
</main>
<aside right>
<iframes src=".html">
</aside>
</div>

<scripts>
funtion barra lateral, superior, botones, etc etc;
me parece que cada html por separado funciona su propio script supongo ... jajajja a
Copilot dijo
T, lo que quieres es básicamente fusionar todo lo que tienes en una sola “plantilla base” que sirva como esqueleto para tu web, con:

Navbar superior y sidebar lateral (izquierda y derecha).

Diseño responsive: 3 columnas en escritorio, paneles apilados o deslizables en móvil.

Scroll controlado y centrado del contenido aunque haya zoom.

Sin depender de librerías externas (todo CSS y JS propios).

Espacios para iframes donde cargar tus otras páginas como generadorCodes.html o VistasMultimedia.html.

Scripts separados por página: cada iframe mantiene su propio JS.

📐 Plantilla Base HTML + CSS + JS
Aquí te dejo un ejemplo limpio y listo para que pegues tus propios estilos y scripts.
Es autónomo (no depende de URLs externas) y ya incluye la lógica de desktop/mobile y scroll.

Html


Copiar
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Plantilla Principal</title>
<style>
  /* ====== RESET Y BASE ====== */
  * { box-sizing: border-box; margin: 0; padding: 0; }
  html, body { height: 100%; font-family: sans-serif; background: #f3f4f6; }

  /* ====== LAYOUT DESKTOP ====== */
  .layout {
    display: grid;
    grid-template-columns: 25% 1fr 25%;
    height: 100vh;
  }
  aside, main {
    overflow-y: auto;
    padding: 10px;
  }
  aside { background: #e5e7eb; }
  main { background: #fff; }

  /* ====== NAVBAR SUPERIOR ====== */
  .navbar {
    position: fixed;
    top: 0; left: 0; right: 0;
    height: 50px;
    background: linear-gradient(90deg, #4f46e5, #3b82f6);
    color: white;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 15px;
    z-index: 1000;
  }
  .navbar h1 { font-size: 1.2rem; }
  .navbar button {
    background: rgba(255,255,255,0.2);
    border: none;
    padding: 5px 10px;
    color: white;
    cursor: pointer;
    border-radius: 4px;
  }

  /* ====== MOBILE ====== */
  @media (max-width: 768px) {
    .layout {
      grid-template-columns: 1fr;
      grid-template-rows: auto 1fr auto;
    }
    aside {
      display: none; /* ocultar sidebars por defecto */
    }
    aside.active {
      display: block;
      position: fixed;
      top: 50px;
      bottom: 0;
      width: 80%;
      z-index: 999;
    }
    aside.left { left: 0; }
    aside.right { right: 0; }
  }

  /* ====== IFRAMES ====== */
  iframe {
    width: 100%;
    height: calc(100vh - 70px);
    border: none;
    background: white;
  }
</style>
</head>
<body>

<!-- NAVBAR SUPERIOR -->
<div class="navbar">
  <button onclick="toggleSidebar('left')">☰</button>
  <h1>Mi Web</h1>
  <button onclick="toggleSidebar('right')">☰</button>
</div>

<!-- LAYOUT PRINCIPAL -->
<div class="layout" style="padding-top:50px;">
  <aside class="left">
    <iframe src="generadorCodes.html"></iframe>
  </aside>
  <main>
    <iframe src="VistasMultimedia.html"></iframe>
  </main>
  <aside class="right">
    <iframe src="otraVista.html"></iframe>
  </aside>
</div>

<script>
  // Lógica para mostrar/ocultar sidebars en móvil
  function toggleSidebar(side) {
    const aside = document.querySelector(`aside.${side}`);
    aside.classList.toggle('active');
  }

  // Centrar contenido aunque haya zoom
  window.addEventListener('resize', centerLayout);
  window.addEventListener('load', centerLayout);
  function centerLayout() {
    document.body.style.display = 'flex';
    document.body.style.justifyContent = 'center';
  }
</script>

</body>
</html>
🔹 Cómo usar esta plantilla
Navbar: ya está fija arriba, con botones para abrir/cerrar las sidebars en móvil.

Layout Desktop: 3 columnas (izquierda, centro, derecha).

Layout Mobile: solo se ve el main por defecto; las sidebars se abren con los botones.

Iframes: cambia src="..." por las páginas que quieras cargar (generadorCodes.html, VistasMultimedia.html, etc.).

CSS propio: todo está en <style> para que no dependas de archivos externos.

Scroll: cada aside y main tiene su propio scroll vertical.

💡 Si quieres, puedo fusionar aquí mismo partes de tus otros archivos (como el generador de snippets, el panel multimedia, etc.) para que ya vengan integrados en esta plantilla y no tengas que abrirlos en iframes.
Así tendrías una sola página con todo.

¿Quieres que te prepare esa versión “todo en uno” con tus herramientas ya dentro del layout?1

1
github.com




Editar en una página
Ayer
Dijiste
puedes hacerme la versión de toooodo todo esto en uno??? 🥺🥺🥺🥺  me ayudas porfa
Copilot dijo
Plantilla todo-en-uno: layout + media panel + generador de snippets
Aquí tienes un único archivo HTML que integra todo lo que pediste: navbar, sidebars (izquierda/derecha), layout responsive (3 columnas en desktop, paneles ocultos y deslizables en móvil), panel multimedia que acepta selección de archivos o carpetas (webkitdirectory), cards con vista previa, extracción de fecha desde el nombre y lastModified, orden por fecha antigua, generación automática de dos snippets (local blob preview y ruta para GitHub Pages /nombre.ext), botón de copiar por card, y scroll interno en cards sin perder calidad visual.

Copia todo esto en un archivo llamado index.html  y ábrelo localmente o súbelo a tu repo. Cada iframe integrado puede reemplazarse por tus archivos separados si los prefieres (están integrados aquí para que no necesites iframes).

Html


Copiar
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Plantilla OHANA - All in one</title>
<style>
  /* RESET / BASE */
  *{box-sizing:border-box;margin:0;padding:0}
  html,body{height:100%;font-family:Inter,Segoe UI,Arial,sans-serif;background:#f3f4f6;color:#111}
  a{color:inherit}
  button{cursor:pointer}

  /* NAVBAR */
  .navbar{
    position:fixed;top:0;left:0;right:0;height:56px;
    background:linear-gradient(90deg,#4f46e5,#3b82f6);
    color:#fff;display:flex;align-items:center;justify-content:space-between;padding:0 14px;z-index:1200;
    box-shadow:0 6px 18px rgba(50,50,93,0.12)
  }
  .nav-left{display:flex;gap:8px;align-items:center}
  .brand{font-weight:700}
  .nav-actions{display:flex;gap:8px;align-items:center}

  /* LAYOUT */
  .frame{display:grid;grid-template-columns:260px 1fr 320px;gap:18px;padding:72px 18px 18px 18px;min-height:100vh}
  aside{background:#fff;border-radius:12px;padding:12px;box-shadow:0 6px 18px rgba(16,24,40,.06);overflow:auto}
  main{background:#fff;border-radius:12px;padding:12px;box-shadow:0 6px 18px rgba(16,24,40,.06);overflow:auto}

  /* SIDEBAR CONTENT */
  .menu-title{font-weight:700;margin-bottom:8px;color:#0f172a}
  .file-list, .crud-list{display:flex;flex-direction:column;gap:10px}

  /* MEDIA GRID */
  .controls{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:12px}
  .grid{display:grid;gap:14px;grid-template-columns:repeat(auto-fill,minmax(220px,1fr))}
  .card{background:#f9fafb;border-radius:10px;overflow:hidden;display:flex;flex-direction:column;max-height:420px}
  .card-media{flex:1 1 auto;overflow:auto;background:#111}
  .card-media img,.card-media video, .card-media iframe{width:100%;height:auto;display:block}
  .card-body{padding:10px;background:#fff;border-top:1px solid #eef2f7;flex-shrink:0}
  .card-body p{font-size:13px;margin-bottom:6px;color:#0f172a}
  .snippet{font-family:ui-monospace,SFMono-Regular,Menlo,monospace;background:#f1f5f9;padding:8px;border-radius:6px;font-size:12px;white-space:pre-wrap;overflow:auto;max-height:100px}

  /* REPO SNIPPET / BUTTONS */
  .row{display:flex;gap:8px;align-items:center}
  .small-btn{padding:6px 8px;border-radius:6px;border:1px solid #e6edf3;background:#fff}
  .primary{background:#3b82f6;color:#fff;border:none}

  /* SEARCH */
  .search{width:100%;padding:8px;border-radius:8px;border:1px solid #e6edf3}

  /* FOOTER */
  footer{padding:8px;text-align:center;color:#64748b;font-size:13px}

  /* MOBILE */
  @media (max-width:900px){
    .frame{grid-template-columns:1fr;padding:72px 12px 12px 12px}
    aside.left, aside.right{display:none;position:fixed;top:56px;bottom:0;width:76%;z-index:1400;box-shadow:0 20px 40px rgba(2,6,23,0.2)}
    aside.left.active, aside.right.active{display:block}
    .card{max-height:none}
    iframe.embedded{height:60vh;width:100%;border-radius:10px;border:1px solid #e6edf3}
  }

  /* helpers */
  .muted{color:#6b7280;font-size:13px}
  .meta{font-size:12px;color:#475569}
  .badge{font-size:11px;background:#eef2ff;padding:4px 6px;border-radius:6px;color:#0f172a}
</style>
</head>
<body>

<!-- NAVBAR -->
<div class="navbar">
  <div class="nav-left">
    <button id="openLeft" class="small-btn">☰</button>
    <div class="brand">OHANA • Panel</div>
    <div class="muted" style="margin-left:8px">Gestor multimedia</div>
  </div>

  <div class="nav-actions">
    <input id="globalSearch" class="search" placeholder="Buscar por nombre o extensión..." />
    <button id="openRight" class="small-btn">☰</button>
  </div>
</div>

<!-- LAYOUT PRINCIPAL -->
<div class="frame">

  <!-- LEFT SIDEBAR -->
  <aside class="left" id="leftSidebar">
    <div class="menu-title">Herramientas</div>
    <div style="display:flex;flex-direction:column;gap:8px">
      <label class="muted">Seleccionar archivos</label>
      <input id="fileInput" type="file" multiple accept="image/*,video/*,audio/*,.pdf,.html" />
      <label class="muted">Seleccionar carpeta (Android/PC)</label>
      <input id="folderInput" type="file" webkitdirectory multiple />
      <div style="display:flex;gap:6px;align-items:center">
        <button id="sortOld" class="small-btn">Orden: más antiguo</button>
        <button id="sortNew" class="small-btn">Orden: más nuevo</button>
      </div>
      <label class="muted">Filtrar por tipo</label>
      <div style="display:flex;gap:6px">
        <button data-filter="all" class="small-btn">Todos</button>
        <button data-filter="image" class="small-btn">Imágenes</button>
        <button data-filter="video" class="small-btn">Videos</button>
        <button data-filter="audio" class="small-btn">Audios</button>
        <button data-filter="doc" class="small-btn">Docs</button>
      </div>
    </div>

    <hr style="margin:12px 0;border:none;border-top:1px solid #eef2f7" />
    <div class="menu-title">Archivos detectados</div>
    <div id="fileSummary" class="muted">No hay archivos aún</div>
    <div style="height:12px"></div>
    <div class="menu-title">Quick list</div>
    <div id="quickList" class="file-list muted"></div>
  </aside>

  <!-- MAIN -->
  <main>
    <h2 style="margin-bottom:8px">Media Cards Automáticas</h2>
    <p class="muted" style="margin-bottom:12px">Selecciona archivos o carpetas; aquí se generan cards + snippets para GitHub Pages (/nombre.ext) y para vista local (blob URL)</p>

    <div class="controls">
      <label class="muted">Buscar rápido</label>
      <input id="filterInput" class="search" placeholder="Filtrar tarjeta por nombre o año (2017)..." />
    </div>

    <div id="mediaGrid" class="grid" aria-live="polite"></div>
  </main>

  <!-- RIGHT SIDEBAR -->
  <aside class="right" id="rightSidebar">
    <div class="menu-title">Snippet Generator (texto)</div>
    <p class="muted">Escribe nombre o pega ruta tal cual para generar bloque listo para copiar (usa /nombre.ext para GitHub)</p>
    <div style="display:flex;gap:8px;margin-bottom:8px">
      <input id="manualInput" placeholder="imagen.png o /imagen.png" style="flex:1;padding:8px;border-radius:6px;border:1px solid #eef2f7" />
      <button id="genManual" class="small-btn primary">Generar</button>
    </div>
    <div style="margin-bottom:8px"><textarea id="manualOutput" readonly class="snippet" placeholder="Snippet generado"></textarea></div>

    <hr style="margin:12px 0;border:none;border-top:1px solid #eef2f7" />
    <div class="menu-title">Mini vista previa</div>
    <div id="miniPreview" class="muted">Aquí aparecerá el snippet o vista al elegir un item</div>
    <hr style="margin:12px 0;border:none;border-top:1px solid #eef2f7" />
    <div class="menu-title">Notas</div>
    <div class="muted">El navegador NO puede escanear todo /storage/emulated/0 sin tu interacción. Usa "Seleccionar carpeta" para elegir DCIM, Downloads, etc.</div>
  </aside>

</div>

<footer>
  <small>OHANA - Panel • local preview + repo snippets • © <?= new Date().getFullYear ? new Date().getFullYear() : '2025' ?></small>
</footer>

<script>
  /* ====== CONSTANTES y ESTADOS ====== */
  const IMG_EXT = ['jpg','jpeg','png','gif','webp','heic','heif'];
  const VID_EXT = ['mp4','webm','ogg','mov','mkv'];
  const AUD_EXT = ['mp3','wav','aac','ogg','m4a'];
  const IFR_EXT = ['pdf','html','htm'];

  const fileInput = document.getElementById('fileInput');
  const folderInput = document.getElementById('folderInput');
  const mediaGrid = document.getElementById('mediaGrid');
  const quickList = document.getElementById('quickList');
  const fileSummary = document.getElementById('fileSummary');
  const filterInput = document.getElementById('filterInput');
  const globalSearch = document.getElementById('globalSearch');
  const manualInput = document.getElementById('manualInput');
  const manualOutput = document.getElementById('manualOutput');
  const miniPreview = document.getElementById('miniPreview');
  const leftSidebar = document.getElementById('leftSidebar');
  const rightSidebar = document.getElementById('rightSidebar');

  let allItems = []; // {name, ext, blobUrl, file?, repoPath, lastModified, nameDate, type}

  /* ====== HELPERS ====== */
  function extOf(name){ return (name.split('.').pop()||'').toLowerCase(); }
  function typeOf(ext){
    if(IMG_EXT.includes(ext)) return 'image';
    if(VID_EXT.includes(ext)) return 'video';
    if(AUD_EXT.includes(ext)) return 'audio';
    if(IFR_EXT.includes(ext)) return 'iframe';
    return 'document';
  }
  function extractYearFromName(name){
    const m = name.match(/(19|20)\d{2}/);
    return m ? m[0] : null;
  }
  function makeRepoPath(name){ return '/' + name; }

  /* ====== RENDER CARD ====== */
  function createCard(item){
    const card = document.createElement('div'); card.className='card';
    const mediaWrapper = document.createElement('div'); mediaWrapper.className='card-media';

    // media element
    if(item.type==='image'){
      const img = document.createElement('img'); img.src = item.blobUrl; img.alt = item.name;
      mediaWrapper.appendChild(img);
    } else if(item.type==='video'){
      const v = document.createElement('video'); v.controls=true; v.src=item.blobUrl; mediaWrapper.appendChild(v);
    } else if(item.type==='audio'){
      const a = document.createElement('audio'); a.controls=true; a.src=item.blobUrl; mediaWrapper.appendChild(a);
    } else if(item.type==='iframe'){
      const ifr = document.createElement('iframe'); ifr.src=item.blobUrl; mediaWrapper.appendChild(ifr);
    } else {
      const link = document.createElement('a'); link.href = item.blobUrl; link.textContent = 'Abrir'; link.target='_blank'; mediaWrapper.appendChild(link);
    }

    const body = document.createElement('div'); body.className='card-body';
    const title = document.createElement('p'); title.innerHTML = `<strong>${item.name}</strong> <span class="badge">${item.type}</span>`;
    const meta = document.createElement('p'); meta.className='meta';
    meta.textContent = `Nombre fecha: ${item.nameDate || '—'} • Últ. mod.: ${item.lastModified ? new Date(item.lastModified).toLocaleString() : '—'}`;
    const snippetLocal = generateSnippet(item.blobUrl, item.name, item.ext);
    const snippetRepo  = generateSnippet(makeRepoPath(item.name), item.name, item.ext);

    const ta = document.createElement('div'); ta.className='snippet'; ta.textContent = snippetRepo; // mostrar repo snippet por defecto
    const row = document.createElement('div'); row.className='row'; row.style.marginTop='8px';
    const copyRepo = document.createElement('button'); copyRepo.className='small-btn'; copyRepo.textContent='Copiar /repo';
    const copyLocal = document.createElement('button'); copyLocal.className='small-btn'; copyLocal.textContent='Copiar local';
    const previewBtn = document.createElement('button'); previewBtn.className='small-btn'; previewBtn.textContent='Ver';
    const downloadBtn = document.createElement('a'); downloadBtn.className='small-btn'; downloadBtn.textContent='Descargar'; downloadBtn.href = item.blobUrl; downloadBtn.download = item.name;

    copyRepo.onclick = ()=>{ copyToClipboard(snippetRepo); highlightTemp(copyRepo,'Copiado'); ta.textContent = snippetRepo; miniPreview.innerHTML = snippetRepo; };
    copyLocal.onclick = ()=>{ copyToClipboard(snippetLocal); highlightTemp(copyLocal,'Copiado'); ta.textContent = snippetLocal; miniPreview.innerHTML = snippetLocal; };
    previewBtn.onclick = ()=>{ ta.textContent = snippetLocal; miniPreview.innerHTML = ''; miniPreview.appendChild(mediaWrapper.cloneNode(true)); };
    downloadBtn.onclick = ()=>{ /* natural link works */ };

    row.appendChild(copyRepo); row.appendChild(copyLocal); row.appendChild(previewBtn); row.appendChild(downloadBtn);

    body.appendChild(title); body.appendChild(meta); body.appendChild(ta); body.appendChild(row);
    card.appendChild(mediaWrapper); card.appendChild(body);
    return card;
  }

  function generateSnippet(path, name, ext){
    const e = ext.toLowerCase();
    let tag;
    if(IMG_EXT.includes(e)) tag = `<img src="${path}" alt="${name}" style="width:100%;">`;
    else if(VID_EXT.includes(e)) tag = `<video controls src="${path}" style="width:100%;"></video>`;
    else if(AUD_EXT.includes(e)) tag = `<audio controls src="${path}" style="width:100%;"></audio>`;
    else if(IFR_EXT.includes(e)) tag = `<iframe src="${path}" style="width:100%; height:200px; border:none;"></iframe>`;
    else tag = `<a href="${path}" target="_blank" style="display:inline-block; width:100%;">Abrir ${name}</a>`;
    return `<div style="width:100%; margin:1em 0;">\n  ${tag}\n</div>`;
  }

  function copyToClipboard(text){
    navigator.clipboard?.writeText(text).then(()=>{}, ()=>{ fallbackCopy(text); });
  }
  function fallbackCopy(text){
    const t = document.createElement('textarea'); t.value=text; document.body.appendChild(t); t.select(); try{document.execCommand('copy')}catch(e){} t.remove();
  }
  function highlightTemp(el, txt){
    const old = el.textContent; el.textContent = txt; setTimeout(()=> el.textContent = old,900);
  }

  /* ====== RENDER LIST ====== */
  function refreshUI(filter=''){
    mediaGrid.innerHTML=''; quickList.innerHTML=''; fileSummary.textContent = `${allItems.length} archivos`;
    const q = (filter||'').toLowerCase();
    const visible = allItems.filter(i => i.name.toLowerCase().includes(q) || (i.nameDate||'').includes(q));
    if(visible.length===0){ mediaGrid.innerHTML = '<div class="muted">Sin resultados</div>'; return; }
    visible.forEach(item => {
      const c = createCard(item);
      mediaGrid.appendChild(c);
      const li = document.createElement('div'); li.textContent = item.name; quickList.appendChild(li);
    });
  }

  /* ====== FILE PROCESSING ====== */
  function processFile(file){
    const name = file.name;
    const ext = extOf(name);
    const type = typeOf(ext);
    const blobUrl = URL.createObjectURL(file);
    const lastModified = file.lastModified || null;
    const nameDate = extractYearFromName(name);
    return {name, ext, type, blobUrl, file, repoPath: makeRepoPath(name), lastModified, nameDate};
  }

  function handleFiles(fileList, append=true){
    const arr = Array.from(fileList).map(processFile);
    if(!append) allItems = arr; else allItems = allItems.concat(arr);
    // remove duplicates by name (keep first)
    const unique = []; const seen = new Set();
    for(const it of allItems){ if(!seen.has(it.name)){ unique.push(it); seen.add(it.name);} }
    allItems = unique;
    // default sort: by lastModified asc
    allItems.sort((a,b)=> (a.lastModified||0) - (b.lastModified||0));
    refreshUI(filterInput.value || globalSearch.value);
  }

  /* ====== EVENTS ====== */
  fileInput.addEventListener('change', (e)=> handleFiles(e.target.files, true));
  folderInput.addEventListener('change', (e)=> handleFiles(e.target.files, true));

  // quick filter
  filterInput.addEventListener('input', ()=> refreshUI(filterInput.value));
  globalSearch.addEventListener('input', ()=> refreshUI(globalSearch.value));

  // sort buttons
  document.getElementById('sortOld').addEventListener('click', ()=> { allItems.sort((a,b)=> (a.lastModified||0) - (b.lastModified||0)); refreshUI(); });
  document.getElementById('sortNew').addEventListener('click', ()=> { allItems.sort((a,b)=> (b.lastModified||0) - (a.lastModified||0)); refreshUI(); });

  // filter type buttons
  document.querySelectorAll('[data-filter]').forEach(btn=>{
    btn.addEventListener('click', ()=>{
      const f = btn.getAttribute('data-filter');
      if(f==='all') refreshUI();
      else refreshUI(f);
    });
  });

  // manual snippet generator
  document.getElementById('genManual').addEventListener('click', ()=>{
    const val = manualInput.value.trim();
    if(!val) return alert('Escribe nombre o ruta');
    const name = val.split('/').pop();
    const ext = extOf(name);
    const repoPath = val.startsWith('/') ? val : ('/' + name);
    manualOutput.value = generateSnippet(repoPath, name, ext);
  });

  // sidebar toggles for mobile
  document.getElementById('openLeft').addEventListener('click', ()=> leftSidebar.classList.toggle('active'));
  document.getElementById('openRight').addEventListener('click', ()=> rightSidebar.classList.toggle('active'));

  // initialize demo placeholder (optional)
  (function seedDemo(){
    // optional demo: remove or comment out before production
    // small placeholder card to show layout
    // no files auto-loaded for privacy/security
  })();

  /* ====== FILTER BY TYPE OVERRIDE ====== */
  // override refreshUI to accept type filter argument
  const originalRefresh = refreshUI;
  refreshUI = function(filter=''){
    // if filter matches a known type keyword, use type filtering
    const t = filter.toLowerCase();
    if(['image','video','audio','document','iframe'].includes(t)){
      mediaGrid.innerHTML=''; quickList.innerHTML='';
      const visible = allItems.filter(i => i.type === t);
      visible.forEach(item=> mediaGrid.appendChild(createCard(item)));
      return;
    }
    originalRefresh(filter);
  };
</script>
</body>
</html>
Instrucciones rápidas

Abre localmente en tu navegador (guardar como index.html  y doble clic).

Para leer carpetas desde Android/PC selecciona “Seleccionar carpeta” (webkitdirectory). El navegador pedirá elegir la carpeta; no puede escanear todo /storage/emulated/0 sin que elijas.

Cada card muestra: vista previa (blob local), metadatos (año extraído del nombre si existe y lastModified), snippet para GitHub (/nombre.ext) y snippet para vista local (blob URL). Botones para copiar y descargar.

En móvil los sidebars aparecen con los botones ☰. En desktop verás 3 columnas.

Si quieres que el panel auto-ordene por fecha encontrada en el nombre (ej. 2017) en vez de lastModified, puedo añadir opción de sort por nameDate.

¿Quieres que:

Añada botón “Copiar todo” que genere un manifest.json  listo para subir al repo?

O que el layout incluya iframes embebidos con tus páginas concretas (generadorCodes.html, VistasMultimedia.html) dentro de la misma plantilla?

Dime cuál siguiente paso prefieres y lo integro. 🧡🥺





Editar en una página
Dijiste
me ayudas para hacer ... ammm bueno, no puedo poner servidor ni base de datos sql, 

y ya tengo terminado una página web de blog personal y profesional, ademas de querer llenar simular un framework como dinámicas sin base de datos ni servidores  

más que nada quisiera pues en el layout en el aside  left normal qué es lo que normalmente se pone para el usuario o para el resto del contenido o menú del contenido también lo mismo para aside right ... lo que quisiera saber cómo organizar varias muchísimas secciones o sea tengo la parte o el repositorio Home, repositorio fit donde normalmente estoy haciendo publicaciones de mi perfil personal cómo poner imágenes fotos, tengo un repositorio pictures donde también pues más que nada son las fotos o la galería personal, 

también otro repositorio para poner apps o juegos que son es un repositorio donde juntaré la mayor parte de juegos o fotos para prpyectar, 

con base a esto no sé de qué manera puedo hacer más fácil o que no me cueste tanto el estar poniendo página uno página dos de pues una fit en el Home o en mi perfil normal, Entonces no sé de qué manera pueda hacer algo básico en donde pues haga una base de datos o algo así y no sé si me salga más rápido separar todos por líneas de código de entre 100 y 200 para que me cargue rápido o dividir el contenido porque sí poner bastantes iframes si me está si me afecta rendimiento
Copilot dijo
Resumen rápido
Te doy un plan práctico y listo para implementar sin servidor:

Usa archivos JSON + contenido estático en tu repo como “base de datos” (manifestos).

Usa localStorage para cachear y editar localmente (simular CRUD).

Carga contenido bajo demanda (fetch + lazy loading) y pagínalo para rendimiento.

Evita iframes para contenido interno; úsalos sólo para sandboxes o terceros.

Te dejo estructura recomendada para aside left / main / aside right y ejemplos de código (router hash, plantillas, paginación, manifest.json, edición local).

Estructura de repositorios sugerida (en tu GitHub)
/Home/ — landing, posts destacados, perfil

/fit/ — publicaciones tipo “fit” (posts cortos)

/pictures/ — galería (imágenes originales / thumbs)

/apps/ — demos, juegos, experimentos

/data/ — manifests: posts.json, pictures.json, apps.json

/snippets/ — plantillas HTML parciales si necesitas

/assets/ — CSS, JS, thumbnails, favicons

Cada manifest.json  contiene sólo metadatos (nombre, ruta, fecha, tags). El contenido grande (post HTML o markdown, assets) vive en su carpeta.

Ejemplo /data/posts.json:

Json


Copiar
[
  {"id":"p1","title":"Mi rutina","repoPath":"/fit/p1.html","thumb":"/pictures/thumb-p1.jpg","date":"2023-06-01","tags":["fitness","diario"]},
  {"id":"p2","title":"Rutina 2018","repoPath":"/fit/p2.html","thumb":"/pictures/thumb-p2.jpg","date":"2018-07-10","tags":["old","fit"]}
]
Por qué esto funciona sin servidor
GitHub Pages sirve archivos estáticos; fetch puede leer /data/posts.json directamente.

Puedes editar manifests y subir al repo para “actualizar la base de datos”.

localStorage te deja simular creación, edición y cache local sin backend.

Sidebar left / main / sidebar right — qué poner y cómo organizar
Left (navegación y controls — persistente)

Perfil (foto, nombre, rol, enlaces sociales).

Buscador global (filtra manifests).

Filtros rápidos (tags, tipo: images / posts / apps).

Acciones: subir (abre diálogo), importar manifest, exportar manifest JSON.

Shortcuts: “Nuevo post”, “Subir imagen”, “Crear app demo”.

Main (dinámico)

Ruta por hash (#/home, #/fit, #/pictures, #/apps, #/post/p1)

Lista/paginación de items (thumb + meta + snippet repo) — carga por página.

Vista detalle: carga HTML/markdown del item (fetch), muestra media, meta, comentarios en localStorage.

Right (contextual / utilities)

Inspector del item seleccionado: metadata editable en UI (modifica localStorage).

Snippets list (copiar rutas /embed code para GitHub).

Mini preview (render HTML o imágenes).

Acciones: copiar todo page manifest, descargar manifest, ordenar por fecha/nombre.

UX y rendimiento (lo esencial)
No cargues todo el contenido de golpe. Carga manifest (pequeño) y renderiza páginas de N items (ej. 12).

Lazy load de imágenes (loading="lazy") y thumbnails pequeños en /pictures/thumbs.

Evita iframes: incrusta HTML/Markdown con fetch + innerHTML o markdown-it (es local y pequeño). Iframes son costosos y rompen estilos; úsalos sólo si necesitas sandbox.

Usa requestIdleCallback o setTimeout para tareas no críticas (indexación, thumbnails).

Cache en localStorage: una vez fetch de un post, guarda HTML en localStorage con key y TTL para evitar refetch.

Virtualize lists si tienes miles de items (render visible window only) — librería simple o implementación propia.

Routing simple (hash router)
Ejemplo corto para cambiar vistas con #/fit, #/pictures, #/post/:id:

Js


Copiar
function onHashChange(){
  const hash = location.hash.slice(1) || '/home';
  const [path, id] = hash.split('/').filter(Boolean);
  if(!path) return showHome();
  if(path === 'fit') return showList('fit');
  if(path === 'pictures') return showList('pictures');
  if(path === 'post' && id) return showPost(id);
}
window.addEventListener('hashchange', onHashChange);
onHashChange();
showList(fetchManifest('fit')) -> render con paginación.
showPost(id) -> fetch(/fit/${id}.html) o buscar en cache.

Ejemplo: cargar manifest y paginar (esqueleto)
Js


Copiar
async function loadManifest(kind){
  const res = await fetch(`/data/${kind}.json`);
  const list = await res.json();
  return list;
}

function paginate(list, page=1, per=12){
  const start=(page-1)*per; return {page, per, total:list.length, items: list.slice(start,start+per)};
}

async function showList(kind, page=1){
  const manifest = await loadManifest(kind);
  const {items,total} = paginate(manifest,page);
  renderCards(items);
  renderPager(total, page, per=12);
}
Editar metadata y simular un “save”
Al editar en UI, guarda en localStorage: localStorage.setItem('posts-manifest', JSON.stringify(updatedManifest));

Si quieres persistir en repo, descarga el JSON y súbelo manualmente a GitHub (o usa GitHub web UI para pegarlo). Puedes proporcionar un botón “Exportar manifest” que descargue archivo JSON.

Ejemplo export:

Js


Copiar
function downloadJSON(obj, name='manifest.json'){
  const url = URL.createObjectURL(new Blob([JSON.stringify(obj, null, 2)],{type:'application/json'}));
  const a = document.createElement('a'); a.href=url; a.download=name; a.click(); URL.revokeObjectURL(url);
}
Plantilla de card ligera (render)
Usa template strings y sanitize el HTML si incluyes markdown convertido.

Imagen: <img loading="lazy" width="380" src="/pictures/thumb-xxx.jpg" alt="...">

Metadata: fecha (ISO), tags array.join(', ').

Botones: copiar repo-path, abrir detalle, editar metadata.

Mini guía de workflow diario (para no volverte loco)
Sube tus fotos/videos a carpeta /pictures en el repo (ojito: no subir archivos enormes si no quieres que Pages tarde).

Actualiza /data/pictures.json (puedes generar localmente con script o editor y subir).

En tu sitio, la UI fetch /data/pictures.json y muestra paginación.

Si quieres publicar un post, crea /fit/pX.html y agrega metadato en /data/fit.json.

Si necesitas muchos assets, crea thumbs automáticos (fuera de GH Pages) o usa tamaños pequeños.

¿Y si quiero editar desde la UI y subir directo al repo?
Desde el navegador no puedes push directo sin autenticar y una API backend.

Opciones sin servidor:

Generar el JSON actualizado y descargarlo (export), subirlo manualmente por GitHub web.

Usar GitHub web UI para editar archivos (manual).

Si más adelante quieres automatizar, podrías usar GitHub Actions con un workflow que lea un manifest subido por un archivo que subas (pero eso requiere algo de CI).

Ejemplo completo pequeño (esqueleto HTML+JS) — incluye: fetch manifest, render paginado, editar metadata y exportar
Html


Copiar
<!-- snippet -->
<div id="list"></div>
<div id="pager"></div>

<script>
const per=8;
async function getManifest(kind='pictures'){
  // intenta cache localStorage primero
  const cached = localStorage.getItem(kind+'-manifest');
  if(cached) return JSON.parse(cached);
  const res = await fetch('/data/'+kind+'.json');
  const json = await res.json();
  localStorage.setItem(kind+'-manifest', JSON.stringify(json));
  return json;
}

function renderCards(items){
  const list = document.getElementById('list'); list.innerHTML='';
  items.forEach(it=>{
    const div = document.createElement('div');
    div.innerHTML = `<img loading="lazy" src="${it.thumb}" style="width:100%"><h4>${it.title}</h4><p>${it.date}</p>
      <button onclick="copy('/${it.path}')">Copiar ruta</button>
      <button onclick="editItem('${it.id}')">Editar</button>`;
    list.appendChild(div);
  });
}

function copy(text){navigator.clipboard.writeText(text)}
// pager, editItem, saveToLocalStorage...
</script>
Respuestas rápidas a preguntas que planteaste
¿Pongo todo con iframes? No — evita iframes para contenido propio. Mejor fetch + render. Iframes afectan rendimiento, añaden contexto y estilo propio.

¿Separar contenido en archivos de 100–200 líneas? Sí: modulariza por página o componente; ayuda al rendimiento y a mantener el repo ordenado.

¿Cómo simular un framework? Usa: manifests JSON + templates JS + localStorage + router hash. Tendrás rutas, CRUD simulado y paginación sin backend.

¿Orden por fecha antigua dentro del nombre? Extrae con regex (/\b(19|20)\d{2}\b/) y usa ese valor para ordenar si existe; si no, usa lastModified o date meta en manifest.

Si quieres, te preparo:

Un repo-ready starter: carpeta /data con ejemplo manifests + /index.html con todo el código (fetch, paginación, editor).

O bien un archivo index.html  que puedas pegar directamente (todo en uno) con UI completa: sidebar left, main, sidebar right, router, list, editor y export.

¿Prefieres que te entregue el index.html  completo y listo para subir a GitHub Pages ahora mismo? ¿O quieres primero el starter manifests + ejemplos para tu estructura actual?





Editar en una página
Dijiste
un index completo para toda la iu en sí está suficientemente bien renderizado estaría bien súper todo en uno ya vinculado para el j1 tendría que agregar absolutamente todo por ejemplo todas las páginas webs todos los contenidos o ya en una sola feed puede ir todo y aparte me faltaría algo para que únicamente cargue los contenidos así supongo que en Cards los puedo dividir cada una para que cargue únicamente lo que está en la pantalla o por ejemplo también es muy necesario lo de los cookies o pedir permiso para descargar cookies o caché, entiendo que esto es algo que necesita servidor o base de datos pero es justamente lo que ahorita no puedo hacer y  me lo voy a evitar, pero básicamente eso es una página web dinámica no o sea sé que todo lo que yo pueda editar ya que tipo Cruds landing page únicamente yo puedo editarlo desde ahí mismo aunque bueno igual me encantaría también ir editando poco a poco el diseño del código y todo eso
Copilot dijo
Plantilla index.html todo-en-uno (UI dinámica, manifests, CRUD simulado, lazy-load y consentimientos)
Copia y pega todo en un archivo llamado index.html. . Es una app estática que funciona en GitHub Pages sin servidor. Características principales:

Layout: navbar, aside izquierdo (herramientas), main (feed con cards paginadas y lazy-loading), aside derecho (editor/preview).

Manifiestos JSON (data/*.json) soportados; si no existen usa localStorage.

CRUD simulado: editar metadatos en UI y exportar manifest (descarga JSON).

Lazy-load de imágenes/videos con IntersectionObserver para cargar solo lo visible.

Orden/filtrado/ búsqueda, paginación, importación manual de JSON.

Consentimiento de cookies local (solo UI) y limpieza de cache localStorage.

No requiere servidor ni bases de datos; todo está en el repositorio o en localStorage.

Archivo: guarda como index.html  y ábrelo localmente o súbelo a GitHub Pages.

Html


Copiar
<!doctype html>
<html lang="es">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>OHANA • Panel Dinámico (Estático)</title>
<style>
  /* RESET + BASE */
  *{box-sizing:border-box;margin:0;padding:0}
  html,body{height:100%;font-family:Inter,Segoe UI,Arial,sans-serif;background:#f3f4f6;color:#0f172a}
  a{color:inherit}
  button{cursor:pointer}

  /* NAVBAR */
  .navbar{position:fixed;top:0;left:0;right:0;height:56px;
    background:linear-gradient(90deg,#4f46e5,#3b82f6);
    color:#fff;display:flex;align-items:center;justify-content:space-between;padding:0 14px;z-index:1200;
    box-shadow:0 6px 18px rgba(50,50,93,0.12)}
  .brand{font-weight:700}

  /* LAYOUT GRID */
  .frame{display:grid;grid-template-columns:260px 1fr 340px;gap:18px;padding:72px 18px 18px 18px;min-height:100vh}
  aside, main{background:#fff;border-radius:12px;padding:12px;box-shadow:0 6px 18px rgba(16,24,40,.06);overflow:auto}
  .muted{color:#6b7280;font-size:13px}
  .menu-title{font-weight:700;margin-bottom:8px;color:#0f172a}

  /* CONTROLS */
  .controls{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:12px}
  input[type="text"], input[type="search"], textarea {padding:8px;border-radius:8px;border:1px solid #e6edf3;width:100%}
  .small-btn{padding:7px 10px;border-radius:8px;border:1px solid #e6edf3;background:#fff}
  .primary{background:#3b82f6;color:#fff;border:none}

  /* GRID DE CARDS */
  .grid{display:grid;gap:14px;grid-template-columns:repeat(auto-fill,minmax(220px,1fr))}
  .card{background:#f9fafb;border-radius:10px;overflow:hidden;display:flex;flex-direction:column;max-height:460px}
  .card-media{flex:1 1 auto;overflow:hidden;background:#111;display:flex;align-items:center;justify-content:center}
  .card-media img,.card-media video{width:100%;height:auto;display:block}
  .card-body{padding:10px;background:#fff;border-top:1px solid #eef2f7;flex-shrink:0}
  .card-body p{font-size:13px;margin-bottom:6px;color:#0f172a}
  .snippet{font-family:ui-monospace,SFMono-Regular,Menlo,monospace;background:#f1f5f9;padding:8px;border-radius:6px;font-size:12px;white-space:pre-wrap;overflow:auto;max-height:88px}

  /* PAGINACIÓN */
  .pager{display:flex;gap:6px;justify-content:center;margin-top:12px}

  /* MOBILE */
  @media (max-width:960px){
    .frame{grid-template-columns:1fr;padding:72px 12px 12px 12px}
    aside.left, aside.right{display:none;position:fixed;top:56px;bottom:0;width:84%;z-index:1400;box-shadow:0 20px 40px rgba(2,6,23,0.2)}
    aside.left.active, aside.right.active{display:block}
    iframe.embedded{height:60vh;width:100%;border-radius:10px;border:1px solid #e6edf3}
    .card{max-height:none}
  }

  /* footer small */
  footer{padding:8px;text-align:center;color:#64748b;font-size:13px}
</style>
</head>
<body>

<!-- NAVBAR -->
<div class="navbar">
  <div style="display:flex;gap:10px;align-items:center">
    <button id="openLeft" class="small-btn">☰</button>
    <div class="brand">OHANA • Panel</div>
    <div class="muted" style="margin-left:8px">Gestor estático y editor local</div>
  </div>

  <div style="display:flex;gap:8px;align-items:center">
    <input id="globalSearch" type="search" placeholder="Buscar posts, imágenes, apps..." style="width:320px;padding:8px;border-radius:8px;border:1px solid rgba(255,255,255,0.18)">
    <button id="openRight" class="small-btn">☰</button>
  </div>
</div>

<!-- FRAME -->
<div class="frame">

  <!-- LEFT ASIDE: herramientas y navegación -->
  <aside class="left" id="leftSidebar">
    <div class="menu-title">Herramientas</div>

    <div style="display:flex;flex-direction:column;gap:8px">
      <label class="muted">Seleccionar archivos</label>
      <input id="fileInput" type="file" multiple accept="image/*,video/*,audio/*,.pdf,.html" />
      <label class="muted">Seleccionar carpeta (webkitdirectory)</label>
      <input id="folderInput" type="file" webkitdirectory multiple />
      <div style="display:flex;gap:6px">
        <button id="loadDemo" class="small-btn">Cargar demo</button>
        <button id="clearLocal" class="small-btn">Limpiar cache</button>
      </div>

      <label class="muted">Manifests (repositorio)</label>
      <div style="display:flex;gap:6px">
        <input id="manifestUrl" type="text" placeholder="/data/posts.json" value="/data/posts.json"/>
        <button id="fetchManifest" class="small-btn primary">Cargar</button>
      </div>

      <label class="muted">Filtros rápidos</label>
      <div style="display:flex;gap:6px;flex-wrap:wrap">
        <button data-filter="all" class="small-btn">Todos</button>
        <button data-filter="image" class="small-btn">Imágenes</button>
        <button data-filter="video" class="small-btn">Videos</button>
        <button data-filter="audio" class="small-btn">Audios</button>
        <button data-filter="app" class="small-btn">Apps</button>
      </div>

      <label class="muted">Orden</label>
      <div style="display:flex;gap:6px;">
        <button id="sortOld" class="small-btn">Más antiguos</button>
        <button id="sortNew" class="small-btn">Más nuevos</button>
      </div>
    </div>

    <hr style="margin:12px 0;border:none;border-top:1px solid #eef2f7" />
    <div class="menu-title">Resumen</div>
    <div id="summary" class="muted">0 items</div>

    <hr style="margin:12px 0;border:none;border-top:1px solid #eef2f7" />
    <div class="menu-title">Importar / Exportar</div>
    <div style="display:flex;gap:6px">
      <input id="uploadJson" type="file" accept="application/json" />
      <button id="exportJson" class="small-btn">Exportar manifest</button>
    </div>
    <div class="muted" style="margin-top:8px">Exporta manifest para subir al repo (data/*.json)</div>
  </aside>

  <!-- MAIN: feed con cards -->
  <main>
    <h2 style="margin-bottom:8px">Feed</h2>
    <p class="muted" style="margin-bottom:12px">Selecciona archivos o carga un manifest.json desde tu repo. Las cards se cargan perezosamente (solo lo visible).</p>

    <div class="controls">
      <input id="filterInput" type="text" placeholder="Filtrar por nombre, año o tag..." style="flex:1" />
      <select id="perPage" style="width:120px;padding:8px;border-radius:8px;border:1px solid #e6edf3">
        <option value="8">8 / página</option>
        <option value="12" selected>12 / página</option>
        <option value="20">20 / página</option>
      </select>
    </div>

    <div id="mediaGrid" class="grid" aria-live="polite"></div>
    <div id="pager" class="pager" style="margin-top:12px;display:flex;gap:8px;justify-content:center"></div>
  </main>

  <!-- RIGHT ASIDE: editor / preview -->
  <aside class="right" id="rightSidebar">
    <div class="menu-title">Editor / Preview</div>

    <div class="muted" style="margin-bottom:8px">Selecciona una card para editar metadatos o pegar una ruta y generar snippet.</div>

    <label class="muted">Snippet o ruta (/imagen.jpg)</label>
    <input id="manualInput" type="text" placeholder="/imagen.png" />
    <div style="display:flex;gap:6px;margin-top:8px">
      <button id="genManual" class="small-btn primary">Generar snippet</button>
      <button id="copyManual" class="small-btn">Copiar snippet</button>
    </div>
    <div style="margin-top:8px"><textarea id="manualOutput" class="snippet" readonly placeholder="El snippet aparecerá aquí..."></textarea></div>

    <hr style="margin:12px 0;border:none;border-top:1px solid #eef2f7" />
    <div id="editorPane" style="display:none">
      <div style="display:flex;gap:8px;align-items:center"><strong id="editTitle">Editar</strong><span class="muted" id="editType"></span></div>
      <label class="muted">Título</label>
      <input id="editName" type="text" />
      <label class="muted">Tags (coma separadas)</label>
      <input id="editTags" type="text" />
      <label class="muted">Fecha (ISO)</label>
      <input id="editDate" type="text" />
      <div style="display:flex;gap:6px;margin-top:8px">
        <button id="saveMeta" class="small-btn primary">Guardar</button>
        <button id="cancelEdit" class="small-btn">Cancelar</button>
      </div>
    </div>

    <hr style="margin:12px 0;border:none;border-top:1px solid #eef2f7" />
    <div class="menu-title">Mini preview</div>
    <div id="miniPreview" class="muted">Nada seleccionado</div>
  </aside>
</div>

<footer>
  <small>OHANA • Panel estático • todo en uno — No requiere servidor • © <span id="year"></span></small>
</footer>

<!-- COOKIE CONSENT (simple y local) -->
<div id="cookieBar" style="position:fixed;left:12px;right:12px;bottom:12px;background:#111;color:#fff;padding:10px;border-radius:8px;display:none;z-index:2000;align-items:center;justify-content:space-between;">
  <div style="flex:1">Usamos almacenamiento local para guardar ediciones y caches. Acepta para continuar con la experiencia guardada localmente.</div>
  <div style="display:flex;gap:8px;margin-left:12px">
    <button id="declineCookies" class="small-btn">No aceptar</button>
    <button id="acceptCookies" class="small-btn primary">Aceptar</button>
  </div>
</div>

<script>
/* ====== Config y estado ====== */
const IMG_EXT = ['jpg','jpeg','png','gif','webp','heic','heif'];
const VID_EXT = ['mp4','webm','ogg','mov','mkv'];
const AUD_EXT = ['mp3','wav','aac','ogg','m4a'];
const IFR_EXT = ['pdf','html','htm'];

const fileInput = document.getElementById('fileInput');
const folderInput = document.getElementById('folderInput');
const mediaGrid = document.getElementById('mediaGrid');
const summary = document.getElementById('summary');
const filterInput = document.getElementById('filterInput');
const globalSearch = document.getElementById('globalSearch');
const perPageSelect = document.getElementById('perPage');
const pager = document.getElementById('pager');
const manifestUrl = document.getElementById('manifestUrl');
const fetchManifestBtn = document.getElementById('fetchManifest');
const uploadJson = document.getElementById('uploadJson');
const exportJson = document.getElementById('exportJson');
const manualInput = document.getElementById('manualInput');
const manualOutput = document.getElementById('manualOutput');
const genManual = document.getElementById('genManual');
const copyManual = document.getElementById('copyManual');
const miniPreview = document.getElementById('miniPreview');
const editorPane = document.getElementById('editorPane');
const editName = document.getElementById('editName');
const editTags = document.getElementById('editTags');
const editDate = document.getElementById('editDate');
const saveMeta = document.getElementById('saveMeta');
const cancelEdit = document.getElementById('cancelEdit');
const cookieBar = document.getElementById('cookieBar');
const acceptCookies = document.getElementById('acceptCookies');
const declineCookies = document.getElementById('declineCookies');
document.getElementById('year').textContent = new Date().getFullYear();

let allItems = [];     // { id, name, ext, type, blobUrl, repoPath, lastModified, tags:[], date }
let page = 1;
let cookieAccepted = localStorage.getItem('ohana_cookies') === 'yes';

/* ====== Helpers ====== */
function extOf(name){ return (name.split('.').pop()||'').toLowerCase(); }
function typeOf(ext){
  if(IMG_EXT.includes(ext)) return 'image';
  if(VID_EXT.includes(ext)) return 'video';
  if(AUD_EXT.includes(ext)) return 'audio';
  if(IFR_EXT.includes(ext)) return 'iframe';
  return 'document';
}
function genId(){ return 'id'+Math.random().toString(36).slice(2,9); }
function nameDate(name){ const m = name.match(/(19|20)\d{2}/); return m ? m[0] : ''; }
function repoPath(name){ return '/' + name; }

/* ====== IntersectionObserver para lazy-load de medias ====== */
const io = new IntersectionObserver(entries=>{
  entries.forEach(entry=>{
    if(entry.isIntersecting){
      const el = entry.target;
      const src = el.getAttribute('data-src');
      if(src){
        if(el.tagName === 'IMG' || el.tagName === 'VIDEO'){
          el.src = src;
        } else if(el.tagName === 'IFRAME'){
          el.src = src;
        } else {
          el.setAttribute('href', src);
        }
        el.removeAttribute('data-src');
        io.unobserve(el);
      }
    }
  });
},{rootMargin:'200px 0px'});

/* ====== Render card (no inserta src directo, usa data-src para lazy load) ====== */
function createCard(item){
  const card = document.createElement('div'); card.className='card';

  const mediaWrapper = document.createElement('div'); mediaWrapper.className='card-media';
  // element placeholder
  if(item.type==='image'){
    const img = document.createElement('img'); img.alt = item.name; img.loading='lazy'; img.setAttribute('data-src', item.blobUrl||item.repoPath);
    mediaWrapper.appendChild(img); io.observe(img);
  } else if(item.type==='video'){
    const v = document.createElement('video'); v.controls=true; v.playsInline=true; v.setAttribute('data-src', item.blobUrl||item.repoPath);
    mediaWrapper.appendChild(v); io.observe(v);
  } else if(item.type==='audio'){
    const a = document.createElement('audio'); a.controls=true; a.setAttribute('data-src', item.blobUrl||item.repoPath);
    mediaWrapper.appendChild(a); io.observe(a);
  } else if(item.type==='iframe'){
    const ifr = document.createElement('iframe'); ifr.setAttribute('data-src', item.blobUrl||item.repoPath); ifr.style.width='100%'; ifr.style.height='200px';
    mediaWrapper.appendChild(ifr); io.observe(ifr);
  } else {
    const a = document.createElement('a'); a.textContent = 'Abrir'; a.target='_blank'; a.setAttribute('data-src', item.blobUrl||item.repoPath);
    mediaWrapper.appendChild(a); io.observe(a);
  }

  const body = document.createElement('div'); body.className='card-body';
  const title = document.createElement('p'); title.innerHTML = `<strong>${item.name}</strong> <span class="muted">• ${item.type}</span>`;
  const meta = document.createElement('p'); meta.className='muted'; meta.textContent = `Fecha en nombre: ${item.nameDate||'—'} · Últ mod: ${item.lastModified? new Date(item.lastModified).toLocaleString() : '—'}`;
  const snippetRepo = generateSnippet(item.repoPath, item.name, item.ext);
  const snippetLocal = generateSnippet(item.blobUrl || item.repoPath, item.name, item.ext);
  const ta = document.createElement('div'); ta.className='snippet'; ta.textContent = snippetRepo;

  const row = document.createElement('div'); row.style.display='flex'; row.style.gap='8px'; row.style.marginTop='8px';
  const copyRepo = document.createElement('button'); copyRepo.className='small-btn'; copyRepo.textContent='Copiar repo';
  const copyLocal = document.createElement('button'); copyLocal.className='small-btn'; copyLocal.textContent='Copiar local';
  const editBtn = document.createElement('button'); editBtn.className='small-btn'; editBtn.textContent='Editar';
  const dl = document.createElement('a'); dl.className='small-btn'; dl.textContent='Descargar'; dl.href = item.blobUrl || item.repoPath; dl.download = item.name;

  copyRepo.onclick = ()=>{ copyToClipboard(snippetRepo); ta.textContent = snippetRepo; miniPreview.innerHTML = snippetRepo; };
  copyLocal.onclick = ()=>{ copyToClipboard(snippetLocal); ta.textContent = snippetLocal; miniPreview.innerHTML = ''; miniPreview.appendChild(document.createTextNode('Vista local:')); };
  editBtn.onclick = ()=> openEditor(item);
  row.appendChild(copyRepo); row.appendChild(copyLocal); row.appendChild(editBtn); row.appendChild(dl);

  body.appendChild(title); body.appendChild(meta); body.appendChild(ta); body.appendChild(row);
  card.appendChild(mediaWrapper); card.appendChild(body);
  return card;
}

/* ====== Snippet generator ====== */
function generateSnippet(path, name, ext){
  const e = (ext||name.split('.').pop()).toLowerCase();
  let tag;
  if(IMG_EXT.includes(e)) tag = `<img src="${path}" alt="${name}" style="width:100%;">`;
  else if(VID_EXT.includes(e)) tag = `<video controls src="${path}" style="width:100%;"></video>`…